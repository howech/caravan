{"version":3,"sources":["components/Spend/styles.module.scss","images/logo.png","utils/index.js","components/Disclaimer.jsx","components/Help.jsx","actions/settingsActions.js","components/NetworkPicker.jsx","components/QuorumPicker.jsx","components/AddressTypePicker.jsx","actions/utils.js","actions/publicKeyImporterActions.js","components/Copyable.jsx","components/MultisigDetails.jsx","components/CreateAddress/Conflict.jsx","components/CreateAddress/AddressGenerator.jsx","components/CreateAddress/TextPublicKeyImporter.jsx","components/CreateAddress/ExtendedPublicKeyPublicKeyImporter.jsx","components/Hermit/HermitReader.jsx","components/CreateAddress/HermitPublicKeyImporter.jsx","components/WalletFeedback.jsx","components/CreateAddress/HardwareWalletPublicKeyImporter.jsx","components/EditableName.jsx","components/CreateAddress/PublicKeyImporter.jsx","components/CreateAddress/index.jsx","components/ClientPicker.jsx","actions/clientActions.jsx","block_explorer.js","bitcoind.js","blockchain.js","actions/transactionActions.jsx","actions/ownershipActions.jsx","components/Spend/ScriptEntry.jsx","components/Spend/UTXOSet.jsx","components/Spend/OutputEntry.jsx","components/Spend/OutputsForm.jsx","components/Spend/TextSignatureImporter.jsx","components/Hermit/HermitDisplayer.jsx","components/Spend/HermitSignatureImporter.jsx","components/Spend/HardwareWalletSignatureImporter.jsx","actions/signatureImporterActions.jsx","components/Spend/SignatureImporter.jsx","components/Spend/Transaction.jsx","components/Spend/ConfirmOwnership.jsx","components/Spend/index.jsx","components/Navbar.jsx","components/Footer.jsx","components/ErrorBoundry.js","components/App.jsx","registerServiceWorker.js","reducers/utils.js","reducers/settingsReducer.jsx","reducers/clientReducer.jsx","reducers/braidReducer.jsx","actions/extendedPublicKeyImporterActions.js","reducers/quorumReducer.jsx","reducers/addressReducer.jsx","reducers/ownershipReducer.jsx","reducers/signatureImportersReducer.js","reducers/transactionReducer.js","actions/walletActions.jsx","reducers/index.js","index.jsx"],"names":["module","exports","feeMagicBtn","utxoTxid","outputsFormInput","unconfirmed","__webpack_require__","p","externalLink","url","text","react_default","a","createElement","href","target","rel","Disclaimer","Card","CardHeader","title","CardContent","Help","Box","mt","mb","Typography","variant","Grid","container","spacing","item","md","direction","List","ListItem","ListItemIcon","Description","ListItemText","YouTube","GitHub","CardActions","Button","BugReport","components_Disclaimer","SET_NETWORK","SET_TOTAL_SIGNERS","SET_REQUIRED_SIGNERS","SET_ADDRESS_TYPE","SET_FROZEN","NetworkPicker","handleNetworkChange","event","setNetwork","_this","props","value","_this$props","this","network","frozen","FormControl","component","RadioGroup","FormControlLabel","id","control","Radio","color","name","label","onChange","checked","MAINNET","disabled","TESTNET","FormHelperText","React","Component","mapDispatchToProps","type","connect","state","settings","MAX_TOTAL_SIGNERS","QuorumPicker","renderIncrementRequiredSigners","requiredSigners","totalSigners","IconButton","onClick","handleIncrementRequiredSigners","AddCircle","renderDecrementRequiredSigners","_this$props2","handleDecrementRequiredSigners","RemoveCircle","renderIncrementTotalSigners","_this$props3","handleIncrementTotalSigners","renderDecrementTotalSigners","_this$props4","handleDecrementTotalSigners","_this$props5","setRequiredSigners","preventDefault","_this$props6","_this$props7","setTotalSigners","_this$props8","_this$props9","justify","xs","alignItems","number","AddressTypePicker","handleTypeChange","setType","addressType","P2SH","P2SH_P2WSH","P2WSH","actionWrapper","numberedActionWrapper","wrappedNumberedActions","mapping","actionIndex","wrappedMapping","actionFunctionNames","Object","keys","length","actionFunctionName","actionType","SORT_PUBLIC_KEY_IMPORTERS","setPublicKeyImporterName","resetPublicKeyImporterBIP32Path","setPublicKeyImporterBIP32Path","setPublicKeyImporterMethod","setPublicKeyImporterPublicKey","setPublicKeyImporterFinalized","movePublicKeyImporterUp","movePublicKeyImporterDown","Copyable","copied","timer","componentWillUnmount","clearTimeout","render","newline","children","react_copy_to_clipboard_lib_default","onCopy","options","format","className","badge","FileCopy","fontSize","setTimeout","setState","defaultProps","icon","MultisigDetails","renderScript","script","hex","scriptToHex","ops","scriptToOps","sm","components_Copyable","multisig","address","redeemScript","multisigRedeemScript","witnessScript","multisigWitnessScript","align","blockExplorerAddressURL","OpenInNew","Chip","networkLabel","concat","multisigRequiredSigners","multisigTotalSigners","multisigAddressType","Conflict","Warning","AddressGenerator","publicKeyCount","isInConflict","publicKeyImporters","values","some","importer","conflict","filter","publicKeyImporter","finalized","publicKeysAreCanonicallySorted","publicKeys","map","publicKey","sortedPublicKeys","sort","index","canonicallySortPublicKeys","sortPublicKeyImporters","generateMultisig","publicKeyImporterNum","push","generateMultisigFromPublicKeys","apply","downloadAddressDetails","body","addressDetailsText","filename","addressDetailsFilename","blob","Blob","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","URL","createObjectURL","download","appendChild","click","removeChild","redeemScriptLine","witnessScriptLine","scriptsSpacer","publicKeyImporterBIP32Paths","publicKeyImporterBIP32Path","join","bip32Path","method","canonicallySorted","CreateAddress_Conflict","error","components_MultisigDetails","objectSpread","TextPublicKeyImporter","_this$state","TextField","fullWidth","handleChange","hasError","helperText","size","import","validateAndSetPublicKey","setError","validatePublicKey","DEFAULT_BIP32_PATH","ExtendedPublicKeyPublicKeyImporter","componentDidMount","setBIP32PathToDefault","extendedPublicKey","extendedPublicKeyError","bip32PathError","handleExtendedPublicKeyChange","hasExtendedPublicKeyError","handleBIP32PathChange","hasBIP32PathError","bip32PathIsDefault","resetBIP32Path","deriveChildPublicKey","validateAndSetBIP32Path","setBIP32PathError","mode","validateExtendedPublicKey","QR_CODE_READER_DELAY","HermitReader","walletState","PENDING","interaction","width","startText","commandMessage","messageFor","code","instructions","command","handleStart","ACTIVE","react_qr_reader_lib_default","delay","onError","handleError","onScan","handleScan","style","facingMode","handleStop","onStart","onClear","message","data","onSuccess","parse","e","HermitPublicKeyImporter","publicKeyError","HermitExportPublicKey","disableChangeMethod","FormGroup","Hermit_HermitReader","enableChangeMethod","pubkey","bip32_path","reset","WalletFeedback","filteredMessages","m","i","renderMessage","key","messageIcon","messages","excludeCodes","excludeCode","includes","level","INFO","Info","WARNING","ERROR","Error","messageColrName","HardwareWalletPublicKeyImporter","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","HardwareWalletExportPublicKey","walletType","UNSUPPORTED","messageTextFor","components_WalletFeedback","messagesFor","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","run","sent","t0","console","stop","_this$state2","hasMessagesFor","_this$state3","defaultBIP32Path","isSupported","EditableName","editing","newName","submit","Check","cancel","Clear","startEditing","Edit","undefined","setName","XPUB","TEXT","PublicKeyImporter","components_EditableName","moveUp","ArrowUpward","moveDown","ArrowDownward","renderImport","labelId","InputLabel","Select","handleMethodChange","MenuItem","TREZOR","LEDGER","HERMIT","renderImportByMethod","CreateAddress_HardwareWalletPublicKeyImporter","CreateAddress_HermitPublicKeyImporter","CreateAddress_ExtendedPublicKeyPublicKeyImporter","CreateAddress_TextPublicKeyImporter","setMethod","setPublicKey","finalize","setFinalized","renderBIP32Path","callback","errback","setBIP32Path","validateBIP32Path","_this$props10","renderPublicKey","_this$props11","find","publicKeyImporterIndex","ownProps","CreateAddress","renderPublicKeyImporters","CreateAddress_AddressGenerator","components_QuorumPicker","components_AddressTypePicker","components_NetworkPicker","CreateAddress_PublicKeyImporter","ClientPicker","url_edited","setUrl","handleUrlChange","setUrlError","validateUrl","handleUsernameChange","setUsername","setUsernameError","username","validateUsername","handlePasswordChange","setPassword","setPasswordError","password","validatePassword","toggle","client","charAt","toUpperCase","slice","Switch_Switch","host","exec","pass","url_error","username_error","password_error","InputProps","startAdornment","InputAdornment","position","wrappedActions","setStatus","_callee2","utxosResult","utxos","_context2","axios","get","blockExplorerAPIURL","Promise","all","_ref","utxo","transactionResult","transactionHex","amount","txid","BigNumber","abrupt","confirmed","status","vout","satoshisToBitcoins","toFixed","amountSats","_x6","arguments","response","_callee3","feeEstimatesResult","feeEstimates","_context3","Math","ceil","_callee4","broadcastResult","_context4","post","callBitcoind","auth","params","_args2","_ref4","resolve","reject","headers","Accept","Content-Type","jsonrpc","then","resp","catch","_x7","_x8","_ref5","promises","previousTransactions","result","forEach","mapindex","confirmations","bitcoinsToSatoshis","_x9","_callee5","_ref2","_ref2$numBlocks","numBlocks","feeRate","_context5","feerate","_callee6","_ref3","_context6","log","BLOCK_EXPLORER","bitcoindParams","fetchAddressUTXOs","_x","_x2","_blockExplorerGetAddresesUTXOs","blockExplorerGetAddresesUTXOs","_x4","_bitcoindListUnspent","bitcoindListUnspent","fetchFeeEstimate","_x3","_blockExplorerGetFeeEstimate","blockExplorerGetFeeEstimate","_x5","_bitcoindEstimateSmartFee","bitcoindEstimateSmartFee","broadcastTransaction","_blockExplorerBroadcastTransaction","blockExplorerBroadcastTransaction","_bitcoindSendRawTransaction","bitcoindSendRawTransaction","CHOOSE_PERFORM_SPEND","SET_INPUTS","ADD_OUTPUT","SET_OUTPUT_ADDRESS","SET_OUTPUT_AMOUNT","DELETE_OUTPUT","SET_FEE_RATE","SET_FEE","FINALIZE_OUTPUTS","RESET_OUTPUTS","SET_TXID","setOutputAmount","amountString","CHOOSE_CONFIRM_OWNERSHIP","SET_OWNERSHIP_MULTISIG","RESET_PUBLIC_KEY_IMPORTER","RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_BIP32_PATH","SET_PUBLIC_KEY_IMPORTER_METHOD","SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY","ScriptEntry","scriptHex","scriptError","fetchUTXOsError","fetchedUTXOs","hasScriptError","hasFetchUTXOsError","scriptName","scriptTitle","substring","handleScriptChange","validateHex","parseError","generateMultisigFromHex","renderDetails","chosePerformSpend","choseConfirmOwnership","buttonsDisabled","performSpend","confirmOwnership","setInputs","setFrozen","choosePerformSpend","fetchUTXOsResult","inputsTotalSats","fetchUTXOs","isLessThanOrEqualTo","reduce","accumulator","currentValue","plus","chooseConfirmOwnership","setOwnershipMultisig","multiline","autoFocus","rows","inputs","spend","ownership","chosen","transaction","UTXOSet","renderInputs","input","inputIndex","confirmedStyle","styles","confirmedTitle","TableRow","hover","TableCell","toString","blockExplorerTransactionURL","Table","TableHead","TableBody","TableFooter","colSpan","OutputEntry","handleAddressChange","setAddress","hasAddressError","addressError","handleAmountChange","setAmount","hasAmountError","amountError","isNotBalanceable","outputs","feeError","newAmount","autoBalancedAmount","validateOutputAmountBTC","isBalanceable","hasBalanceError","balanceError","fee","outputTotalSats","output","feeSats","minus","balanceAction","handleBalance","handleDelete","remove","finalizedOutputs","placeholder","Tooltip","placement","Delete","OutputsForm","titleRef","createRef","feeRateFetchError","initialOutputState","scrollToTitle","componentDidUpdate","signatureImporters","o","k","current","scrollIntoView","behavior","renderOutputs","Spend_OutputEntry","inputsTotal","outputsAndFeeTotal","hasFeeRateFetchError","hasFeeRateError","feeRateError","hasFeeError","handleAddOutput","addOutput","handleFeeRateChange","setFeeRate","handleFeeChange","setFee","handleFinalize","finalizeOutputs","handleReset","resetOutputs","getFeeEstimate","newFeeRate","finish","gatherSignaturesDisabled","outputAmount","ref","endAdornment","Speed","readOnly","defaultValue","valueString","TextSignatureImporter","signatureJSON","JSON","validateAndSetSignature","HermitDisplayer","errorMessage","string","qrcode_react_lib_default","HermitSignatureImporter","signatureImporter","bip32Paths","HermitSignTransaction","signatureError","Hermit_HermitDisplayer","encodedData","clear","signature","bip32PathFinalized","HardwareWalletSignatureImporter","inConstructor","verified","HardwareWalletSignMultisigTransaction","renderAction","renderDeviceConfirmInfo","renderTargets","verifyError","sign","verify","_this$state4","_this$state5","verifyPublicKey","multisigPublicKeys","indexOf","signatureImporterNum","otherSignatureImporter","otherPublicKeyIndex","stateUpdate","setSignatureImporterName","setSignatureImporterMethod","setSignatureImporterBIP32Path","setSignatureImporterPublicKeys","setSignatureImporterSignature","setSignatureImporterFinalized","setSignatureImporterComplete","SignatureImporter","showUnsignedTransaction","getCurrent","notMyTurn","Spend_TextSignatureImporter","Spend_HermitSignatureImporter","Spend_HardwareWalletSignatureImporter","renderUnsignedTransaction","unsignedTransaction","toHex","handleHideUnsignedTransaction","handleShowUnsignedTransaction","setSignature","setPublicKeys","multisigBIP32Path","renderSignature","stringify","inputsSignatures","setComplete","Array","isArray","finalizedSignatureImporters","inputNumber","inputSignature","validateMultisigSignature","finalizedSignatureImporterNum","finalizedSignatureImporter","Transaction","broadcasting","buildSignedTransaction","inputsSignaturesByPublicKey","inputSignaturesByPublicKey","signerInputPublicKey","signerInputSignature","signedMultisigTransaction","handleBroadcast","setTxid","signedTransaction","transactionURL","signedTransactionHex","ConfirmOwnership","renderConfirmation","GreenListItemIcon","styled","Check_default","Clear_default","role","Spend","Spend_ScriptEntry","renderBody","components_ClientPicker","Spend_ConfirmOwnership","spendable","Spend_UTXOSet","Spend_OutputsForm","renderSignatureImporters","signaturesFinalized","Spend_Transaction","Spend_SignatureImporter","every","addressFinalized","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","Navbar","classes","AppBar","Toolbar","logo","require","Footer","src","alt","height","version","ErrorBoundary","errorInfo","mx","my","whiteSpace","componentStack","App","CssBaseline","Container","maxWidth","components_Navbar","ErrorBoundry_ErrorBoundary","HashRouter","Switch","Route","path","components_Footer","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","updateState","change","initialState","initialNodeState","present","balanceSats","nodes","trailingEmptyNodes","fetchUTXOsErrors","braidReducer","action","node","newNodes","updatedState","allBIP32Paths","p1","p2","p1Segments","split","p2Segments","parseInt","otherNode","isEqualTo","updateNode","setExtendedPublicKeyImporterName","resetExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterBIP32Path","setExtendedPublicKeyImporterMethod","setExtendedPublicKeyImporterExtendedPublicKey","setExtendedPublicKeyImporterFinalized","fingerprint","timestamp","Date","getTime","extendedPublicKeys","extendedPublicKeyImporters","extendedPublicKeyImporter","initialExtendedPublicKeyImporterState","multisigBIP32Root","bip32PathModified","1","2","3","updateExtendedPublicKeyImporterState","field","extendedPublicKeyImporterChange","newState","initialPublicKeyImporterState","finalizedNetwork","finalizedAddressType","updatePublicKeyImporterState","publicKeyImporterChange","setConflict","updateImporterPaths","initialSignatureImporterState","updateSignatureImporterState","signatureImporterChange","sortInputs","b","x","toLowerCase","y","n","initialOutputsState","validateTransaction","diff","isNaN","isLessThan","absoluteValue","setFeeForRate","feeRateString","nout","estimateMultisigTransactionFee","numInputs","numOutputs","feesPerByteInSatoshis","UPDATE_DEPOSIT_NODE","UPDATE_CHANGE_NODE","spendReducers","combineReducers","updateMultisig","keyResetState","updateInputs","newOutputs","toConsumableArray","validateAddress","outputIndex","updateOutputAddress","updateOutputAmount","deleteOutput","validateFeeRate","updateFeeRate","feeString","validateFeeBTC","estimateMultisigTransactionFeeRate","feesInSatoshis","updateFee","unsignedMultisigTransaction","finalizeSignatureImporterState","walletReducers","deposits","rootReducers","updateNetwork","updateAddressType","stub","updateTotalSigners","count","updateFinalizedSettings","abovePublicKeyImporter","belowPublicKeyImporter","sortedPublicKeyImporters","publicKeyImportersChange","quorum","extendedPublicKeyImporterNum","wallet","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","logger","ReduxPromise","thunk","ReactDOM","es","components_App","getElementById","process","origin","addEventListener","fetch","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8a8e2fc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"feeMagicBtn\":\"styles_feeMagicBtn__3rvPV\",\"utxoTxid\":\"styles_utxoTxid__2mEZz\",\"outputsFormInput\":\"styles_outputsFormInput__1c3_M\",\"unconfirmed\":\"styles_unconfirmed__3rm0X\"};","module.exports = __webpack_public_path__ + \"static/media/logo.66481e66.png\";","import React from \"react\";\n\nexport function externalLink(url, text) {\n  return <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">{text}</a>;\n}\n\nexport function wrapText(text, columns) {\n  let lines   = [];\n  let index   = 0;\n  let element = 0;\n  while (index <= text.length) {\n    lines.push(<span key={element}>{text.slice(index, index += (columns || 64))}</span>);\n    lines.push(<br key={element + 1}/>);\n    element += 2;\n  }\n  return lines;\n}\n\nexport function validatePositiveInteger(numberString) {\n  if (numberString === null || numberString === undefined || numberString === '') {\n    return \"Cannot be blank.\";\n  }\n  const number = parseInt(numberString, 10);\n  if (Number.isNaN(number) || number.toString().length !== numberString.length || number <= 0) {\n    return \"Must be a positive whole number.\";\n  }\n\n  return '';\n  \n}\n","import React from 'react';\n\n// Components\nimport { Card, CardHeader, CardContent, } from \"@material-ui/core\";\n\nconst Disclaimer = () => (\n  <Card>\n    <CardHeader title=\"Disclaimer\"/>\n    <CardContent>\n      <small>\n        This application is in “alpha” state and is presented\n        for evaluation and testing only. It is provided “as is,”\n        and any express or implied warranties, including but not\n        limited to the implied warranties of merchantability and\n        fitness for a particular purpose, are disclaimed. By\n        using this application, you accept all risks of such\n        use, including full responsibility for any direct or\n        indirect loss of any kind resulting from the use of this\n        application, which may involve complete loss of any\n        Bitcoin or other coins associated with addresses used\n        with this application. In no event shall Unchained\n        Capital, Inc., its employees and affiliates, or\n        developers of this application be liable for any direct,\n        indirect, incidental, special, exemplary, or\n        consequential damages (including, but not limited to,\n        procurement of substitute goods or services; loss of\n        use, data, or profits; or business interruption) however\n        caused and on any theory of liability, whether in\n        contract, strict liability, or tort (including\n        negligence or otherwise) arising in any way out of the\n        use of this application, even if advised of the\n        possibility of such damage.\n      </small>\n        \n      </CardContent>\n    </Card>\n);\n\nexport default Disclaimer;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\n\n// Components\nimport {\n  Box, Typography, CardHeader, CardContent, Grid, Card, Button,\n  List, ListItem, ListItemText, ListItemIcon, CardActions,\n} from \"@material-ui/core\";\nimport {Description, GitHub, YouTube, BugReport} from \"@material-ui/icons\";\nimport Disclaimer from \"./Disclaimer\";\n\nconst Help = () => (\n  <div>\n\n    <Box mt={4} mb={2}>\n      <Typography variant=\"h2\">Welcome to Caravan!</Typography>\n    </Box>\n\n    <Grid container spacing={3}>\n\n      <Grid container item md={8} spacing={2} direction=\"column\">\n\n        <Grid item>\n          <Card>\n\n            <CardHeader title=\"Stateless Multisig Coordinator\"/>\n\n            <CardContent>\n\n              <p>\n                Caravan is making bitcoin <strong>multisig</strong> custody easier and safer through transparency and standards.\n              </p>\n\n              <p>\n                Caravan is a <strong>coordination</strong> software.  It connects to a source of consensus and your keys to build and interact with multisig bitcoin addresses.\n              </p>\n\n              <p>Caravan is also <strong>stateless</strong>.  It does not itself store any data.  You must safekeep the addresses (and redeem scripts & BIP32 paths) you create.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Keys\"/>\n            <CardContent>\n\n              <p>All bitcoin is ultimately protected by private keys.</p>\n\n              <p>Your private key may live on a piece of paper, a hardware wallet, some software on a laptop, or even just in your mind.  Caravan, being stateless, cannot store your private key but it can talk to hardware devices or software applications which do.</p>\n\n              <p>Caravan supports entering public keys and signatures via text, so any wallet which can export such data can be made compatible with Caravan.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Consensus\"/>\n            <CardContent>\n\n              <p>In order to look up address balances and broadcast transactions, Caravan requires knowledge of the constantly changing bitcoin network.</p>\n\n              <p>Running a full bitcoin node is the best way to determine the current state of the bitcoin network.  Caravan can be easily configured to use your own bitcoin node for consensus information and broadcasting transactions.</p>\n\n              <p>If you don't want to or cannot run your own full node, Caravan defaults to using the freely available API at <code>blockstream.info</code>.</p>\n\n            </CardContent>\n          </Card>\n        </Grid>\n\n\n      </Grid>\n\n      <Grid container item md={4} spacing={4} direction=\"column\">\n\n        <Grid item>\n\n          <Card>\n            <CardHeader title=\"Learn More\"></CardHeader>\n            <CardContent>\n\n              <List>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <Description />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.unchained-capital.com/blog/the-caravan-arrives/\", \"Blog Post\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <YouTube />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://www.youtube.com/playlist?list=PLUM8mrUjWoPRsVGEZ1gTntqPd4xrQZoiH\", \"Video Tutorials\")}\n                  </ListItemText>\n                </ListItem>\n\n                <ListItem>\n                  <ListItemIcon>\n                    <GitHub />\n                  </ListItemIcon>\n                  <ListItemText>\n                    {externalLink(\"https://github.com/unchained-capital/caravan\", \"Source Code\")}\n                  </ListItemText>\n                </ListItem>\n\n              </List>\n            </CardContent>\n          </Card>\n\n        </Grid>\n\n        <Grid item>\n          <Card>\n            <CardHeader title=\"Supported Devices\"></CardHeader>\n            <CardContent>\n              Caravan has been tested with the following hardware wallets:\n              <ul>\n                <li>{externalLink(\"https://shop.trezor.io/product/trezor-one-white\", \"Trezor One\")}</li>\n                <li>{externalLink(\"https://www.ledger.com/products/ledger-nano-s\", \"Ledger Nano S\")}</li>\n              </ul>\n              And web browsers:\n              <ul>\n                <li>{externalLink(\"https://www.google.com/chrome/\", \"Chrome\")}</li>\n                <li>{externalLink(\"https://www.mozilla.org/en-US/firefox/new/\", \"Firefox\")}</li>\n              </ul>\n              Seeing a bug or need a feature?\n            </CardContent>\n            <CardActions>\n\n              <Button href=\"https://github.com/unchained-capital/caravan/issues\"><BugReport /> &nbsp; Report Issue</Button>\n\n            </CardActions>\n          </Card>\n\n        </Grid>\n\n      </Grid>\n    </Grid>\n\n\n    <Box mt={2}>\n      <Disclaimer />\n    </Box>\n\n  </div>\n);\n\nexport default Help;\n","export const SET_NETWORK = 'SET_NETWORK';\nexport const SET_TOTAL_SIGNERS    = \"SET_TOTAL_SIGNERS\";\nexport const SET_REQUIRED_SIGNERS = \"SET_REQUIRED_SIGNERS\";\nexport const SET_ADDRESS_TYPE = 'SET_ADDRESS_TYPE';\nexport const SET_FROZEN = 'SET_FROZEN';\n\nexport function setNetwork(value) {\n  return {\n    type: SET_NETWORK,\n    value: value,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setAddressType(value) {\n  return {\n    type: SET_ADDRESS_TYPE,\n    value: value,\n  };\n}\n\n\nexport function setFrozen(value) {\n  return {\n    type: SET_FROZEN,\n    value: value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  TESTNET,\n  MAINNET,\n} from \"unchained-bitcoin\";\n\n// Components\n\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n         Radio, FormHelperText } from '@material-ui/core';\n\n// Actions\nimport { setNetwork } from '../actions/settingsActions';\n\nclass NetworkPicker extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setNetwork: PropTypes.func.isRequired,\n  };\n\n  handleNetworkChange = (event) => {\n    const { setNetwork } = this.props;\n    setNetwork(event.target.value);\n  };\n\n  render() {\n    const { network, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Network\"/>\n        <CardContent>\n\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id=\"mainnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"mainnet\"\n            label={(<strong>Mainnet</strong>)}\n            onChange={this.handleNetworkChange}\n            checked={network === MAINNET}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id=\"testnet\"\n            control={<Radio color=\"primary\"/>}\n            name=\"network\"\n            value=\"testnet\"\n            label=\"Testnet\"\n            onChange={this.handleNetworkChange}\n            checked={network === TESTNET}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>{'Choose \\'Mainnet\\' if you don\\'t understand the difference.'}</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return { \n    network: state.settings.network, \n    frozen: state.settings.frozen,\n  };\n}\n\nconst mapDispatchToProps = {\n  setNetwork,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NetworkPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Actions\nimport {\n  setTotalSigners,\n  setRequiredSigners,\n} from \"../actions/settingsActions\";\n\n// Components\nimport {\n  Typography, Grid, IconButton,\n  Card, CardHeader, CardContent, Box,\n} from '@material-ui/core';\nimport { AddCircle, RemoveCircle } from '@material-ui/icons';\nimport './styles.css';\n\nconst MAX_TOTAL_SIGNERS = 7;\n\nclass QuorumPicker extends React.Component {\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {requiredSigners, totalSigners} = this.props;\n\n    return (\n      <Card>\n        <CardHeader title=\"Quorum\"></CardHeader>\n        <CardContent>\n\n          <Box>\n            <Grid container justify=\"center\">\n\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n              <Grid container item xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementRequiredSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{requiredSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Required</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementRequiredSigners()}\n                </Grid>\n\n              </Grid>\n\n              <Grid container item xs={2} direction=\"column\" alignItems=\"center\" justify=\"center\">\n\n                <Grid item>\n                  <Typography variant=\"h6\">of</Typography>\n                </Grid>\n\n              </Grid>\n\n              <Grid item container xs={3} direction=\"column\" alignItems=\"center\">\n\n                <Grid item>\n                  {this.renderIncrementTotalSigners()}\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"h2\">{totalSigners}</Typography>\n                </Grid>\n\n                <Grid item>\n                  <small><p>Total</p></small>\n                </Grid>\n\n                <Grid item>\n                  {this.renderDecrementTotalSigners()}\n                </Grid>\n\n              </Grid>\n              <Grid container item xs={2} direction=\"column\">&nbsp;</Grid>\n\n            </Grid>\n\n          </Box>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n\n  renderIncrementRequiredSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (requiredSigners === totalSigners || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementRequiredSigners} disabled={disabled}>\n        <AddCircle/>\n      </IconButton>\n    );\n  }\n\n  renderDecrementRequiredSigners = () => {\n    const {requiredSigners, frozen} = this.props;\n    const disabled = (requiredSigners === 1 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementRequiredSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  renderIncrementTotalSigners = () => {\n    const {totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === MAX_TOTAL_SIGNERS || frozen);\n    return (\n      <IconButton color=\"primary\" onClick={this.handleIncrementTotalSigners} disabled={disabled}>\n        <AddCircle />\n      </IconButton>\n    );\n  }\n\n  renderDecrementTotalSigners = () => {\n    const {requiredSigners, totalSigners, frozen} = this.props;\n    const disabled = (totalSigners === requiredSigners || totalSigners === 2 || frozen);\n    return (\n      <IconButton color=\"secondary\" onClick={this.handleDecrementTotalSigners} disabled={disabled}>\n        <RemoveCircle />\n      </IconButton>\n    );\n  }\n\n  handleIncrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementRequiredSigners = (event) => {\n    const {requiredSigners, setRequiredSigners} = this.props;\n    setRequiredSigners(requiredSigners - 1);\n    event.preventDefault();\n  }\n\n  handleIncrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners + 1);\n    event.preventDefault();\n  }\n\n  handleDecrementTotalSigners = (event) => {\n    const {totalSigners, setTotalSigners} = this.props;\n    setTotalSigners(totalSigners - 1);\n    event.preventDefault();\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n  setTotalSigners,\n  setRequiredSigners,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuorumPicker);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Card, CardHeader, CardContent, FormControl, RadioGroup, FormControlLabel,\n          Radio, FormHelperText } from '@material-ui/core';\n// Actions\nimport {\n    setAddressType,\n} from '../actions/settingsActions';\n\n\nclass AddressTypePicker extends React.Component {\n\n  static propTypes = {\n    addressType: PropTypes.string.isRequired,\n    frozen: PropTypes.bool.isRequired,\n    setType: PropTypes.func.isRequired,\n  };\n\n  handleTypeChange = (event) => {\n    const { setType } = this.props;\n    setType(event.target.value);\n  };\n\n  render() {\n    const { addressType, frozen } = this.props;\n    return (\n      <Card>\n        <CardHeader title=\"Address Type\"/>\n        <CardContent>\n        <FormControl component=\"fieldset\">\n          <RadioGroup>\n          <FormControlLabel\n            id={P2SH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH}\n            label={P2SH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2SH_P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2SH_P2WSH}\n            label={P2SH_P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2SH_P2WSH}\n            disabled={frozen}\n          />\n          <FormControlLabel\n            id={P2WSH}\n            control={<Radio color=\"primary\"/>}\n            name=\"type\"\n            value={P2WSH}\n            label={P2WSH}\n            onChange={this.handleTypeChange}\n            checked={addressType === P2WSH}\n            disabled={frozen}\n          />\n          </RadioGroup>\n          <FormHelperText>\n            <small>Choose '{P2WSH}' for best practices, '{P2SH}' for greatest compatibility.</small>\n          </FormHelperText>\n        </FormControl>\n        </CardContent>\n        </Card>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\n\nconst mapDispatchToProps = {\n    setType: setAddressType,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressTypePicker);\n","function actionWrapper(type) {\n  return (value) => {\n    return  {type, value,};\n  };\n}\n\nexport function wrappedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = actionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n\nfunction numberedActionWrapper(type) {\n  return (number, value) => {\n    return  {type, number, value,};\n  };\n}\n\nexport function wrappedNumberedActions(mapping) {\n  const wrappedMapping = {};\n  const actionFunctionNames = Object.keys(mapping);\n  let actionIndex;\n  for (actionIndex = 0; actionIndex < actionFunctionNames.length; actionIndex += 1) {\n    const actionFunctionName = actionFunctionNames[actionIndex];\n    const actionType = mapping[actionFunctionName];\n    wrappedMapping[actionFunctionName] = numberedActionWrapper(actionType);\n  }\n  return wrappedMapping;\n}\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_PUBLIC_KEY_IMPORTER_NAME        = \"SET_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY  = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\nexport const SET_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_PUBLIC_KEY_IMPORTER_FINALIZED\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_UP         = \"MOVE_PUBLIC_KEY_IMPORTER_UP\";\nexport const MOVE_PUBLIC_KEY_IMPORTER_DOWN       = \"MOVE_PUBLIC_KEY_IMPORTER_DOWN\";\nexport const SORT_PUBLIC_KEY_IMPORTERS           = \"SORT_PUBLIC_KEY_IMPORTERS\";\n\nexport function sortPublicKeyImporters() {\n  return {\n    type: SORT_PUBLIC_KEY_IMPORTERS,\n  };\n}\n\nexport const {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} = wrappedNumberedActions({\n  setPublicKeyImporterName: SET_PUBLIC_KEY_IMPORTER_NAME,\n  resetPublicKeyImporterBIP32Path: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterBIP32Path: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setPublicKeyImporterMethod: SET_PUBLIC_KEY_IMPORTER_METHOD,\n  setPublicKeyImporterPublicKey: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  setPublicKeyImporterFinalized: SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  movePublicKeyImporterUp: MOVE_PUBLIC_KEY_IMPORTER_UP,\n  movePublicKeyImporterDown: MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n});\n","import PropTypes from 'prop-types';\nimport React       from \"react\";\n\n// Components\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport {FileCopy} from '@material-ui/icons';\n\nclass Copyable extends React.Component {\n\n  state = {\n    copied: false,\n    timer: null,\n  };\n\n  componentWillUnmount = () => {\n    const {timer} = this.state;\n    if (timer) {\n      clearTimeout(timer);\n    }\n  }\n\n  render = () => {\n    const {newline, text, children} = this.props;\n    return (\n      <CopyToClipboard text={text} onCopy={this.onCopy} options={{format: \"text/plain\"}}>\n        <span className=\"copyable\">\n          {children || text}\n          {newline && <br />}\n          {/* {this.props.icon && <span>&nbsp;</span>} */}\n          {/* {this.props.icon && <FAIcon name=\"clipboard\" />} */}\n          {this.badge()}\n        </span>\n      </CopyToClipboard>\n    );\n  }\n\n  badge = () => {\n    const {copied} = this.state;\n    if (copied) {\n      //return (<span>&nbsp; <span className=\"badge badge-success\">Copied</span></span>);\n      return <FileCopy fontSize=\"small\"/>;\n    } else { return null; }\n  }\n  \n  onCopy = () => {\n    const timer = setTimeout(() => {\n      this.setState({copied: false, timer: null});\n    }, 1000);\n    this.setState({copied: true, timer});\n  }\n}\n\nCopyable.defaultProps = {\n  newline: false,\n  icon: true,\n}\n\nCopyable.propTypes = {\n  // defaults\n  newline:   PropTypes.bool.isRequired,\n  icon: PropTypes.bool.isRequired,\n  // parent\n  text:     PropTypes.string,\n  children: PropTypes.any,\n};\n\nexport default Copyable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  scriptToOps,\n  scriptToHex,\n  networkLabel,\n  multisigAddressType,\n  multisigRedeemScript,\n  multisigWitnessScript,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n  blockExplorerAddressURL,\n} from 'unchained-bitcoin';\nimport {\n  externalLink,\n} from \"../utils\";\n\n// Components\nimport Copyable from \"./Copyable\";\nimport { Typography, Grid, Box, Chip} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\nclass MultisigDetails extends React.Component {\n\n  static propTypes = {\n    network:  PropTypes.string.isRequired,\n    multisig: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {network, multisig} = this.props;\n    const address = multisig.address;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    return (\n      <Box mt={2}>\n\n        <Typography variant=\"h6\">Address</Typography>\n\n        <Typography align=\"center\" variant=\"h5\">\n\n          <Grid container direction=\"column\" spacing={2}>\n\n            <Grid item>\n              <Copyable text={address}>\n                <code>{address}</code>\n              </Copyable>\n              &nbsp;\n              {externalLink(blockExplorerAddressURL(address, network), <OpenInNew />)}\n            </Grid>\n\n            <Grid item justify=\"center\" container spacing={3}>\n\n              <Grid item>\n                <Chip label=\"BTC\" />\n              </Grid>\n\n              <Grid item>\n                <Chip label={networkLabel(network)}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={`${multisigRequiredSigners(multisig)}-of-${multisigTotalSigners(multisig)}`}/>\n              </Grid>\n\n              <Grid item>\n                <Chip label={multisigAddressType(multisig)}/>\n              </Grid>\n\n            </Grid>\n          </Grid>\n\n        </Typography>\n\n        {this.renderScript(\"Script\", multisig)}\n        {redeemScript && this.renderScript(\"Redeem Script\", redeemScript)}\n        {witnessScript && this.renderScript(\"Witness Script\", witnessScript)}\n      </Box>\n    );\n  }\n\n  renderScript = (name, script) => {\n    const hex = scriptToHex(script);\n    const ops = scriptToOps(script);\n    return (\n      <Box mt={2}>\n        <Typography variant=\"h6\">{name}</Typography>\n        <Grid container spacing={2}>\n          <Grid item sm={6}>\n            <Copyable text={hex}><code>{hex}</code></Copyable>\n          </Grid>\n          <Grid item sm={6}>\n            <Copyable text={ops}><code>{ops}</code></Copyable>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.settings;\n}\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MultisigDetails);\n","import React from 'react';\n// Components\nimport { \n    List, ListItem, ListItemIcon, ListItemText, Typography\n  } from '@material-ui/core';\nimport {Warning} from '@material-ui/icons';\n  \nconst Conflict = () => {\n    return (\n        <small>\n          <List>\n            <ListItem color=\"error.main\">\n            <ListItemIcon>\n            <Typography color=\"error\"><Warning/></Typography>\n            </ListItemIcon>\n            <ListItemText>\n              <Typography color=\"error\">\n                Warning, BIP32 path is in conflict with the network and address type settings.  Do not proceed unless you are absolutely sure you know what you are doing!\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        </List>\n      </small>\n    );\n  }\n  \n  export default Conflict;\n  ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  generateMultisigFromPublicKeys,\n  scriptToHex,\n  multisigRedeemScript,\n  multisigWitnessScript,\n} from 'unchained-bitcoin';\nimport {externalLink} from \"../../utils\";\n\n// Actions\nimport {sortPublicKeyImporters} from \"../../actions/publicKeyImporterActions\";\n\n// Components\nimport {\n  Box, Grid, Button, Card, CardHeader,\n  CardContent, FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\nimport Conflict from './Conflict';\n\nclass AddressGenerator extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    requiredSigners: PropTypes.number.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    fingerprint: PropTypes.string.isRequired,\n    sortPublicKeyImporters: PropTypes.func.isRequired,\n  };\n\n  render() {\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n          <CardContent>\n            {this.body()}\n          </CardContent>\n      </Card>\n    );\n  }\n\n  body() {\n    const {totalSigners} = this.props;\n    if (this.publicKeyCount() === totalSigners) {\n      const multisig = this.generateMultisig();\n\n      const canonicallySorted = this.publicKeysAreCanonicallySorted();\n      return (\n        <div>\n          {this.isInConflict() && <Conflict/>}\n          {!canonicallySorted &&\n           <Grid container justify=\"space-between\">\n             <Grid item md={8}>\n               <FormHelperText error={true}>WARNING: These public keys are not in the standard {externalLink('https://github.com/bitcoin/bips/blob/master/bip-0067.mediawiki', 'BIP67 order')}.</FormHelperText>\n             </Grid>\n             <Grid item md={4}>\n               <Button variant=\"contained\" color=\"primary\" onClick={this.canonicallySortPublicKeys}>Sort Public Keys</Button>\n             </Grid>\n           </Grid>\n          }\n\n          <Box mt={2}>\n            <MultisigDetails multisig={multisig} />\n          </Box>\n\n          <Box mt={2}>\n            <Button variant=\"contained\" color=\"primary\" onClick={this.downloadAddressDetails}>Download Address Details</Button>\n          </Box>\n\n\n        </div>\n      );\n    }\n    return (\n      <p>\n        {`Once you have imported all ${totalSigners} public keys, `}\n        {'your address details will be displayed here.'}\n      </p>\n    );\n  }\n\n\n  title = () => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>{requiredSigners}-of-{totalSigners} Multisig {addressType} Address</Grid>\n        <Grid item><small>{`Public Keys: ${this.publicKeyCount()}/${totalSigners}`}</small></Grid>\n      </Grid>\n    );\n  }\n\n  isInConflict = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).some(importer => importer.conflict)\n  }\n\n  publicKeyCount = () => {\n    const { publicKeyImporters } = this.props;\n    return Object.values(publicKeyImporters).filter(publicKeyImporter => (publicKeyImporter.finalized)).length;\n  }\n\n  publicKeysAreCanonicallySorted = () => {\n    const {publicKeyImporters} = this.props;\n    const publicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '');\n    const sortedPublicKeys = Object.values(publicKeyImporters).map((publicKeyImporter) => publicKeyImporter.publicKey).filter((publicKey) => publicKey !== '').sort(); // sort mutates the array\n    const sorted = publicKeys.filter((publicKey, index) => { return publicKey === sortedPublicKeys[index];}).length === publicKeys.length;\n    return sorted;\n  }\n\n  canonicallySortPublicKeys = () => {\n    const {sortPublicKeyImporters} = this.props;\n    sortPublicKeyImporters();\n  }\n\n  generateMultisig = () => {\n    const { network, publicKeyImporters, totalSigners, requiredSigners, addressType } = this.props;\n    let publicKeys = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeys.push(publicKeyImporters[publicKeyImporterNum].publicKey);\n    }\n    return generateMultisigFromPublicKeys(network, addressType, requiredSigners, ...publicKeys);\n  }\n\n  downloadAddressDetails = (event) => {\n    event.preventDefault();\n    const multisig = this.generateMultisig();\n    const body = this.addressDetailsText(multisig);\n    const filename = this.addressDetailsFilename(multisig);\n    const blob = new Blob([body], {type: 'text/plain'});\n    if(window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveBlob(blob, filename);\n    }\n    else{\n        var elem = window.document.createElement('a');\n        elem.href = window.URL.createObjectURL(blob);\n        elem.download = filename;\n        document.body.appendChild(elem);\n        elem.click();\n        document.body.removeChild(elem);\n    }\n  }\n\n  addressDetailsFilename = (multisig) => {\n    const {totalSigners, requiredSigners, addressType} = this.props;\n    return `bitcoin-${requiredSigners}-of-${totalSigners}-${addressType}-${multisig.address}.txt`;\n  }\n\n  addressDetailsText = (multisig) => {\n    const {addressType, network, totalSigners, requiredSigners} = this.props;\n    const redeemScript = multisigRedeemScript(multisig);\n    const witnessScript = multisigWitnessScript(multisig);\n    const redeemScriptLine = (redeemScript ? `Redeem Script: ${scriptToHex(redeemScript)}` : '');\n    const witnessScriptLine = (witnessScript ? `Witness Script: ${scriptToHex(witnessScript)}` : '');\n    const scriptsSpacer = (redeemScript && witnessScript ? '\\n\\n' : '');\n    return `Address: ${multisig.address}\n\nType: ${addressType}\n\nNetwork: ${network}\n\nQuorum: ${requiredSigners}-of-${totalSigners}\n\nBIP32 Paths:\n${this.publicKeyImporterBIP32Paths()}\n\n${redeemScriptLine}${scriptsSpacer}${witnessScriptLine}\n`;\n  }\n\n  publicKeyImporterBIP32Paths = () => {\n    const {totalSigners} = this.props;\n    let publicKeyImporterBIP32Paths = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporterBIP32Paths.push(this.publicKeyImporterBIP32Path(publicKeyImporterNum));\n    }\n    return publicKeyImporterBIP32Paths.join(\"\\n\");\n  }\n\n  publicKeyImporterBIP32Path = (number) => {\n    const {publicKeyImporters} =  this.props;\n    const publicKeyImporter = publicKeyImporters[number];\n    const bip32Path = (publicKeyImporter.method === 'text' ? 'Unknown (make sure you have written this down previously!)' : publicKeyImporter.bip32Path);\n    return `  * ${publicKeyImporter.name}: ${bip32Path}`;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.address,\n  };\n}\n\nconst mapDispatchToProps = {\n  sortPublicKeyImporters,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressGenerator);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validatePublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport { Button, TextField, Box } from '@material-ui/core';\n\nclass TextPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n  };\n\n  state = {\n    error: '',\n    publicKey: '',\n  };\n\n  render = () => {\n    const { error, publicKey } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          name=\"publicKey\"\n          label=\"Public Key\"\n          value={publicKey}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={publicKey === '' || this.hasError()}\n          >\n            Add Public Key\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  import = () => {\n    const {validateAndSetPublicKey} = this.props;\n    const {publicKey} = this.state;\n    validateAndSetPublicKey(publicKey, this.setError);\n  }\n  \n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const publicKey = event.target.value;\n    const error = validatePublicKey(publicKey);\n    this.setState({publicKey, error});\n  }\n\n}\n\nexport default TextPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  validateExtendedPublicKey,\n  deriveChildPublicKey,\n} from \"unchained-bitcoin\";\n\n// Components\nimport {  Button, TextField, FormHelperText, Box, Grid } from '@material-ui/core';\n\n\nconst DEFAULT_BIP32_PATH = \"m/0\";\n\nclass ExtendedPublicKeyPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.setBIP32PathToDefault();\n  }\n\n  state = {\n    extendedPublicKey: '',\n    extendedPublicKeyError: '',\n    bip32PathError: '',\n  };\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {extendedPublicKey, extendedPublicKeyError, bip32PathError} = this.state;\n    return (\n      <div>\n        <Box mt={2}>\n          <TextField\n            fullWidth\n            name=\"extendedPublicKey\"\n            label=\"Extended Public Key\"\n            value={extendedPublicKey}\n            onChange={this.handleExtendedPublicKeyChange}\n            error={this.hasExtendedPublicKeyError()}\n            helperText={extendedPublicKeyError}\n          />\n        </Box>\n\n          <Box mt={2}>\n            <Grid container>\n              <Grid item md={10}>\n                  <TextField\n                    fullWidth\n                    name=\"bip32Path\"\n                    label=\"BIP32 Path (relative to xpub)\"\n                    type=\"text\"\n                    value={publicKeyImporter.bip32Path}\n                    onChange={this.handleBIP32PathChange}\n                    error={this.hasBIP32PathError()}\n                    helperText={bip32PathError}\n                  />\n              <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n            </Grid>\n            <Grid item md={2}>\n              {! this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\"  onClick={this.resetBIP32Path}>Default</Button>}\n            </Grid>\n          </Grid>\n          <Box mt={2}>\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.import} disabled={extendedPublicKey === '' || this.hasError()}>Import Public Key</Button>\n          </Box>\n        </Box>\n      </div>\n    );\n  }\n\n  import = () => {\n    const {network, publicKeyImporter, validateAndSetPublicKey} = this.props;\n    const {extendedPublicKey} = this.state;\n    const publicKey = deriveChildPublicKey(extendedPublicKey, publicKeyImporter.bip32Path, network);\n    validateAndSetPublicKey(publicKey, (bip32PathError) => this.setState({bip32PathError}));\n  }\n\n  setBIP32PathToDefault = () => {\n    const {validateAndSetBIP32Path} = this.props;\n    validateAndSetBIP32Path(DEFAULT_BIP32_PATH, () => {}, () => {});\n  }\n\n  hasBIP32PathError = () => {\n    return this.state.bip32PathError !== '';\n  }\n\n  hasExtendedPublicKeyError = () => {\n    return this.state.extendedPublicKeyError !== '';\n  }\n\n  hasError = () => (this.hasBIP32PathError() || this.hasExtendedPublicKeyError());\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError, {mode: \"unhardened\"});\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter} = this.props;\n    return publicKeyImporter.bip32Path === DEFAULT_BIP32_PATH;\n  }\n\n  resetBIP32Path = () => {\n    this.setBIP32PathToDefault();\n    this.setBIP32PathError('');\n  }\n\n  handleExtendedPublicKeyChange = (event) => {\n    const {network} = this.props;\n    const extendedPublicKey = event.target.value;\n    const extendedPublicKeyError = validateExtendedPublicKey(extendedPublicKey, network);\n    this.setState({extendedPublicKey, extendedPublicKeyError});\n  };\n\n}\n\nexport default ExtendedPublicKeyPublicKeyImporter;\n","import React, {Component} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  PENDING,\n  ACTIVE,\n} from \"unchained-wallets\";\n\n// Components\nimport QrReader from \"react-qr-reader\";\nimport { Grid, Button, Box, FormHelperText} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\n\nconst QR_CODE_READER_DELAY = 300; // ms?\n\nclass HermitReader extends Component {\n\n  static propTypes = {\n    onStart: PropTypes.func,\n    onSuccess: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    width: PropTypes.string.isRequired,\n    startText: PropTypes.string.isRequired,\n    interaction: PropTypes.object.isRequired,\n  };\n\n  static defaultProps = {\n    width: \"256px\",\n    startText: \"Scan\",\n  }\n  \n  state = {\n    walletState: PENDING,\n    error: '',\n  };\n\n  render = () => {\n    const {walletState, error} = this.state;\n    const {interaction, width, startText} = this.props;\n\n    if (walletState === PENDING) {\n      const commandMessage = interaction.messageFor({walletState, code: \"hermit.command\"});\n      return (\n        <div>\n          <p>{commandMessage.instructions}</p>\n          <Grid container justify=\"center\" className=\"mb-2\">\n            <Copyable text={commandMessage.command}>\n              <code><strong>{commandMessage.mode}&gt;</strong> {commandMessage.command}</code>\n            </Copyable>\n          </Grid>\n          <p>When you are ready, scan the QR code produced by Hermit:</p>\n          <Box mt={2}>\n            <Button  variant=\"contained\" color=\"primary\" className=\"mt-2\" size=\"large\" onClick={this.handleStart}>{startText}</Button>\n          </Box>\n        </div>\n      );\n    } \n\n    if (walletState === ACTIVE) {\n      return (\n        <Grid container direction=\"column\">\n          <Grid item>\n            <QrReader \n              delay={QR_CODE_READER_DELAY} \n              onError={this.handleError} \n              onScan={this.handleScan}\n              style={{width}}\n              facingMode='user'\n            />\n          </Grid>\n          <Grid item>\n            <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Cancel</Button>\n          </Grid>\n        </Grid>\n      );\n    }\n    \n    if (walletState === 'error' || walletState === 'success') {\n      return (\n        <div>\n          <FormHelperText error>{error}</FormHelperText>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.handleStop}>Reset</Button>\n        </div>\n      );\n    }\n\n    return null;\n  }\n\n  handleStart = () => {\n    const {onStart} = this.props;\n    this.setState({walletState: ACTIVE, error: ''});\n    if (onStart) { onStart(); }\n  }\n\n  handleError = (error) => {\n    const {onClear} = this.props;\n    this.setState({walletState: 'error', error: error.message});\n    if (onClear) {onClear(); }\n  }\n\n  handleScan = (data) => {\n    const {onSuccess, interaction} = this.props;\n    if (data) {\n      try {\n        const result = interaction.parse(data);\n        onSuccess(result);\n        this.setState({walletState: 'success'});\n      } catch(e) {\n        this.handleError(e);\n      }\n    }\n  }\n\n  handleStop = () => {\n    const {onClear} = this.props;\n    this.setState({\n      walletState: PENDING,\n      error: '',\n    });\n    if (onClear) {onClear(); }\n  }\n\n}\n\nexport default HermitReader;\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  HermitExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport { FormGroup, FormHelperText} from '@material-ui/core';\n\nimport HermitReader from \"../Hermit/HermitReader\";\n\nclass HermitPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  state = {\n    publicKeyError: '',\n    walletState: PENDING,\n  };\n\n  componentDidMount = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return new HermitExportPublicKey({network, bip32Path: publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {disableChangeMethod} = this.props;\n    const {publicKeyError} = this.state;\n    return (\n      <FormGroup>\n        <HermitReader\n          startText=\"Import Public Key\"\n          interaction={this.interaction()}\n          onStart={disableChangeMethod}\n          onSuccess={this.import}\n          onClear={this.onClear} />\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </FormGroup>\n    );\n  }\n\n  setError = (value) => {\n    this.setState({publicKeyError: value});\n  }\n\n  import = (data) => {\n    const { validateAndSetBIP32Path, validateAndSetPublicKey, enableChangeMethod } = this.props;\n    enableChangeMethod();\n    const {pubkey, bip32_path} = data;\n    validateAndSetBIP32Path(\n      bip32_path,\n      () => {\n        validateAndSetPublicKey(pubkey, this.setError);\n      },\n      this.setError\n    );\n  }\n\n  onClear = () => {\n    const { reset, enableChangeMethod } = this.props;\n    reset(true);\t\t// clear BIP32 path\n    this.setError('');\n    enableChangeMethod();\n  }\n\n}\n\nexport default HermitPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  INFO,\n  WARNING,\n  ERROR,\n} from \"unchained-wallets\";\nimport { List, ListItem, ListItemIcon, ListItemText } from '@material-ui/core';\nimport { Info, Warning, Error } from '@material-ui/icons';\n\nclass WalletFeedback extends React.Component {\n\n  static propTypes = {\n    messages: PropTypes.array.isRequired,\n    excludeCodes: PropTypes.array.isRequired,\n  };\n\n  static defaultProps = {\n    messages: [],\n    excludeCodes: [],\n  }\n\n  render = () => {\n    return (\n      <small>\n        <List>\n          {this.filteredMessages().map((m, i) => this.renderMessage(m, i))}\n        </List>\n      </small>\n    );\n  }\n\n  renderMessage = (message, key) => {\n    return (\n      <ListItem key={key}>\n        <ListItemIcon>\n          {this.messageIcon(message)}\n        </ListItemIcon>\n        <ListItemText>\n          {message.text}\n        </ListItemText>\n      </ListItem>\n    );\n  }\n\n  filteredMessages = () => {\n    const {messages, excludeCodes} = this.props;\n    return messages.filter((message) => {\n      for (let i=0; i < excludeCodes.length; i++) {\n        const excludeCode = excludeCodes[i];\n        if ((message.code || '').includes(excludeCode)) { return false; }\n      }\n      return true;\n    });\n  }\n\n  messageIcon = (message) => {\n    switch (message.level) {\n    case INFO:\n      return <Info />;\n    case WARNING:\n      return <Warning />;\n    case ERROR:\n      return <Error />;\n    default:\n      return null;\n    }    \n  }\n\n  messageColrName = (message) => {\n    switch (message.level) {\n    case INFO:\n      return \"primary.main\";\n    case WARNING:\n      return \"text.secondary\";\n    case ERROR:\n      return \"error.main\";\n    default:\n      return \"\";\n    }\n  }\n}\n\nexport default WalletFeedback;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  UNSUPPORTED, PENDING, ACTIVE, ERROR,\n  HardwareWalletExportPublicKey,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid\n} from '@material-ui/core';\n\nimport WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletPublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    validateAndSetPublicKey: PropTypes.func.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      publicKeyError: '',\n      bip32PathError: '',\n      walletState: (this.interaction().isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {network, publicKeyImporter} = this.props;\n    return HardwareWalletExportPublicKey({network, walletType: publicKeyImporter.method, bip32Path:publicKeyImporter.bip32Path});\n  }\n\n  render = () => {\n    const {publicKeyImporter} = this.props;\n    const {walletState, publicKeyError} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({walletState})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n       <Grid container>\n        <Grid item md={6}>\n            <TextField\n              fullWidth\n              label=\"BIP32 Path\"\n              value={publicKeyImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n              />\n        </Grid>\n        <Grid item md={6}>\n              {!this.bip32PathIsDefault() && <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={walletState !== PENDING}>Default</Button>}\n        </Grid>\n       </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          <Button\n            type=\"button\"\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.import}\n            disabled={this.hasBIP32PathError() || walletState === ACTIVE}>Import Public Key</Button>\n        </Box>\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"bip32\"]}/>\n        <FormHelperText error>{publicKeyError}</FormHelperText>\n      </Box>\n    );\n  }\n\n  import = async () => {\n    const {validateAndSetPublicKey, enableChangeMethod, disableChangeMethod} = this.props;\n    disableChangeMethod();\n    this.setState({publicKeyError: '', walletState: ACTIVE});\n    try {\n      const publicKey = await this.interaction().run();\n      validateAndSetPublicKey(publicKey, (error) => {this.setState({publicKeyError: error, walletState: PENDING});});\n    } catch(e) {\n      console.error(e);\n      this.setState({publicKeyError: e.message, walletState: PENDING});\n    }\n\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({walletState, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({walletState, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const { validateAndSetBIP32Path } = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  };\n\n  bip32PathIsDefault = () => {\n    const {publicKeyImporter, defaultBIP32Path} = this.props;\n    return publicKeyImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n}\n\nexport default HardwareWalletPublicKeyImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport { Grid, IconButton, TextField } from '@material-ui/core';\nimport { Check, Clear, Edit } from '@material-ui/icons';\n\nclass EditableName extends React.Component {\n\n  static propTypes =  {\n    number: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n  };\n\n  state = {\n    editing: false,\n    newName: '',\n    error: '',\n  };\n\n  componentDidMount = () => {\n    const {name} = this.props;\n    this.setState({newName: name});\n  }\n\n  render = () => {\n    const {name} = this.props;\n    const {editing, newName, error} = this.state;\n    if (editing) {\n      // <Form onSubmit={this.submit} inline>\n      return (\n        <Grid container alignItems=\"center\">\n\n          <Grid item>\n            <TextField\n              label=\"Name\"\n              value={newName}\n              onChange={this.handleChange}\n              error={this.hasError()}\n              helperText={error}\n            />\n          </Grid>\n\n          <Grid item>\n            <IconButton size=\"small\" onClick={this.submit} disabled={this.hasError()}>\n              <Check />\n            </IconButton>\n          </Grid>\n\n          <Grid item>\n            <IconButton color=\"secondary\" size=\"small\" onClick={this.cancel}>\n              <Clear />\n            </IconButton>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <span>\n          <IconButton size=\"small\" onClick={this.startEditing}>\n            <Edit />\n          </IconButton>\n          &nbsp;\n          {name}\n        </span>\n      );\n    }\n  }\n\n  hasError = () => (this.state.error !== '')\n\n  startEditing = (event) => {\n    const {name} = this.props;\n    event.preventDefault();\n    this.setState({editing: true, newName: name});\n  }\n\n  handleChange = (event) => {\n    const newName = event.target.value;\n    let error = '';\n    if (newName === null || newName === undefined || newName === '') {\n      error =  \"Name cannot be blank.\";\n    }\n    this.setState({newName, error});\n  }\n\n  submit = () => {\n    const {setName, number} = this.props;\n    const {newName} = this.state;\n    setName(number, newName);\n    this.setState({editing: false});\n  }\n\n  cancel = () => {\n    const {name} = this.props;\n    this.setState({error: '', newName: name, editing: false});\n  }\n\n}\n\nexport default EditableName;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateBIP32Path,\n  validatePublicKey,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  FormControl, Select, MenuItem,\n  InputLabel, Button, Grid,\n  Box,\n} from '@material-ui/core';\nimport {ArrowUpward, ArrowDownward} from '@material-ui/icons';\n\nimport Copyable from \"../Copyable\";\nimport TextPublicKeyImporter from \"./TextPublicKeyImporter\";\nimport ExtendedPublicKeyPublicKeyImporter from \"./ExtendedPublicKeyPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"./HermitPublicKeyImporter\";\nimport HardwareWalletPublicKeyImporter from \"./HardwareWalletPublicKeyImporter\";\nimport EditableName from \"../EditableName\";\nimport Conflict from \"./Conflict\";\n\n// Actions\nimport {\n  setPublicKeyImporterName,\n  setPublicKeyImporterBIP32Path,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n  setPublicKeyImporterFinalized,\n  movePublicKeyImporterUp,\n  movePublicKeyImporterDown,\n} from '../../actions/publicKeyImporterActions';\n\nconst XPUB = \"xpub\";\nconst TEXT = \"text\";\n\nclass PublicKeyImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    totalSigners: PropTypes.number.isRequired,\n    number: PropTypes.number.isRequired,\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    publicKeyImporters: PropTypes.shape({}).isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    moveUp: PropTypes.func.isRequired,\n    moveDown: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {publicKeyImporter.method && publicKeyImporter.method !== TEXT && publicKeyImporter.conflict && <Conflict/>}\n          {publicKeyImporter.finalized ? this.renderPublicKey() : this.renderImport()}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, totalSigners, publicKeyImporter, setName} = this.props;\n    return (\n      <Grid container justify=\"space-between\">\n        <Grid item>\n          <EditableName number={number} name={publicKeyImporter.name} setName={setName} />\n        </Grid>\n        <Grid item>\n          <Grid container justify=\"flex-end\">\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveUp} disabled={number === 1}><ArrowUpward /></Button>\n            <span>&nbsp;</span>\n            <Button type=\"button\" variant=\"contained\" onClick={this.moveDown} disabled={number === totalSigners}><ArrowDownward /></Button>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n\n  renderImport = () => {\n    const { publicKeyImporter, number } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = `public-key-${number}-importer-select-label`;\n    return (\n      <div>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`public-key-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={publicKeyImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={XPUB}>Derive from extended public key</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n\n        </FormControl>\n\n        {this.renderImportByMethod()}\n      </div>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {publicKeyImporter, network, addressType, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  addressType={addressType}\n                                  defaultBIP32Path={defaultBIP32Path}\n                                  network={network} />;\n    }\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n                                  publicKeyImporter={publicKeyImporter}\n                                  validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                  validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n                                  resetBIP32Path={this.resetBIP32Path}\n                                  enableChangeMethod={this.enableChangeMethod}\n                                  disableChangeMethod={this.disableChangeMethod}\n                                  reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === XPUB) {\n      return <ExtendedPublicKeyPublicKeyImporter\n                                                network={network}\n                                                publicKeyImporter={publicKeyImporter}\n                                                validateAndSetPublicKey={this.validateAndSetPublicKey}\n                                                validateAndSetBIP32Path={this.validateAndSetBIP32Path} />;\n    }\n    if (publicKeyImporter.method === TEXT) {\n      return <TextPublicKeyImporter\n                                                 publicKeyImporter={publicKeyImporter}\n                                                 validateAndSetPublicKey={this.validateAndSetPublicKey} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod, setPublicKey } = this.props;\n    setMethod(number, event.target.value);\n    setPublicKey(number, '');\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  finalize = () => {\n    const { number, setFinalized } = this.props;\n    setFinalized(number, true);\n  }\n\n  reset = (resetBIP32Path) => {\n    const { number, setPublicKey, setFinalized } = this.props;\n    setPublicKey(number, '');\n    setFinalized(number, false);\n    if (resetBIP32Path) {this.resetBIP32Path();}\n  }\n\n  //\n  // Position\n  //\n\n  moveUp = (event) => {\n    const {moveUp, number} = this.props;\n    event.preventDefault();\n    moveUp(number);\n  }\n\n  moveDown = (event) => {\n    const {moveDown, number} = this.props;\n    event.preventDefault();\n    moveDown(number);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  renderBIP32Path = () => {\n    const { publicKeyImporter } = this.props;\n    if (publicKeyImporter.method !== TEXT) {\n      return (\n        <Box mt={4}>\n          <p>The BIP32 path for this public key is:</p>\n          <Grid container justify=\"center\">\n            <Copyable text={publicKeyImporter.bip32Path}>\n              <code>{publicKeyImporter.bip32Path}</code>\n            </Copyable>\n          </Grid>\n          <Box mt={4}><p>You will need this BIP32 path to sign for this key later.  <strong>Write down this BIP32 path!</strong></p></Box>\n        </Box>\n      );\n    }\n    return null;\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n  resetBIP32Path = () => {\n    const {number, resetBIP32Path} = this.props;\n    resetBIP32Path(number);\n  }\n\n  //\n  // Public Key\n  //\n\n\n  renderPublicKey = () => {\n    const { publicKeyImporter } = this.props;\n    return (\n      <div>\n        <p>The following public key was imported:</p>\n        <Grid container justify=\"center\">\n          <Copyable text={publicKeyImporter.publicKey}>\n            <code>{publicKeyImporter.publicKey}</code>\n          </Copyable>\n        </Grid>\n        {this.renderBIP32Path()}\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            size=\"small\"\n            onClick={() => {this.reset(publicKeyImporter.method === HERMIT);}}\n          >\n            Remove Public Key\n          </Button>\n        </Box>\n      </div>\n    );\n  }\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {number, publicKeyImporters, setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(number, publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      if (publicKey && Object.values(publicKeyImporters).find((publicKeyImporter, publicKeyImporterIndex) => (\n        publicKeyImporterIndex !== (number - 1) && publicKeyImporter.publicKey === publicKey\n      ))) {\n        errback && errback('This public key has already been imported.');\n      } else {\n        errback && errback('');\n        this.finalize();\n        callback && callback();\n      }\n    }\n  }\n\n}\n\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.settings,\n    ...state.address,\n    ...{ publicKeyImporter: state.address.publicKeyImporters[ownProps.number] },\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setPublicKeyImporterName,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  setMethod: setPublicKeyImporterMethod,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  setFinalized: setPublicKeyImporterFinalized,\n  moveUp: movePublicKeyImporterUp,\n  moveDown: movePublicKeyImporterDown,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps,)(PublicKeyImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Box } from '@material-ui/core';\nimport {connect} from \"react-redux\";\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport QuorumPicker from '../QuorumPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport AddressGenerator from './AddressGenerator';\nimport PublicKeyImporter from './PublicKeyImporter';\nimport '../styles.css';\n\nclass CreateAddress extends React.Component {\n\n  static propTypes = {\n    totalSigners: PropTypes.number.isRequired,\n  };\n\n  render = () => {\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n\n            {this.renderPublicKeyImporters()}\n\n            <Box mt={2}><AddressGenerator /></Box>\n\n          </Grid>\n          <Grid item md={4}>\n            <Box><QuorumPicker /></Box>\n            <Box mt={2}><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  }\n\n  renderPublicKeyImporters = () => {\n    const {totalSigners} = this.props;\n    const publicKeyImporters = [];\n    for (let publicKeyImporterNum = 1; publicKeyImporterNum  <= totalSigners; publicKeyImporterNum++) {\n      publicKeyImporters.push(\n        <Box key={publicKeyImporterNum} mt={publicKeyImporterNum===1 ? 0 : 2}>\n          <PublicKeyImporter number={publicKeyImporterNum} />\n        </Box>\n      );\n    }\n    return publicKeyImporters;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{totalSigners: state.settings.totalSigners},\n    ...state.address,\n  };\n}\n\nexport default connect(mapStateToProps)(CreateAddress);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {externalLink} from \"../utils\";\n\n// Components\nimport {\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  FormControlLabel,\n  TextField,\n  InputAdornment,\n  Switch,\n} from '@material-ui/core';\n\n// Actions\nimport { wrappedActions } from '../actions/utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst propTypes = {\n  client: PropTypes.shape({}).isRequired,\n  network: PropTypes.string.isRequired,\n  setUrl: PropTypes.func.isRequired,\n  setPassword: PropTypes.func.isRequired,\n  setPasswordError: PropTypes.func.isRequired,\n  setType: PropTypes.func.isRequired,\n  setUsername: PropTypes.func.isRequired,\n  setUsernameError: PropTypes.func.isRequired,\n};\n\nclass ClientPicker extends React.Component {\n  state = {\n    url_edited: false\n  }\n\n  handleTypeChange = (event) => {\n    const { setType, network, setUrl } = this.props;\n    const type = event.target.checked ? 'private' : 'public';\n    if (type === 'private' && !this.state.url_edited) {\n      setUrl(`http://localhost:${network === 'mainnet' ? 8332 : 18332}`)\n    }\n    setType(type);\n  }\n\n  handleUrlChange = (event) => {\n    const { setUrl, setUrlError } = this.props;\n    const url = event.target.value;\n    const error = this.validateUrl(url);\n    if (!this.state.url_edited && !error) this.setState({url_edited: true});\n    setUrl(url);\n    setUrlError(error);\n  };\n\n  handleUsernameChange = (event) => {\n    const { setUsername, setUsernameError } = this.props;\n    const username = event.target.value;\n    const error = this.validateUsername(username);\n    setUsername(username);\n    setUsernameError(error);\n  };\n\n  handlePasswordChange = (event) => {\n    const { setPassword, setPasswordError } = this.props;\n    const password = event.target.value;\n    const error = this.validatePassword(password);\n    setPassword(password);\n    setPasswordError(error);\n  };\n\n  validateUrl(host) {\n    const validhost = /^http(s)?:\\/\\/[^\\s]+$/.exec(host);\n    if (!validhost) return 'Must be a valid URL.'\n    return '';\n  }\n\n  validatePassword(pass) {\n    return '';\n  }\n\n  validateUsername(username) {\n    return '';\n  }\n\n  toggle = () => {\n    const { client } = this.props;\n    const label = client.type.charAt(0).toUpperCase() + client.type.slice(1);\n    return (\n      <FormControlLabel\n        control={\n          <Switch\n            color=\"primary\"\n            checked={client.type === 'private'}\n            onChange={this.handleTypeChange}\n            value=\"private\" />\n        }\n        label={label}\n      />\n    );\n  }\n\n  title = () => (\n    <Grid container justify=\"space-between\">\n      <Grid item>Consensus</Grid>\n      <Grid item>{this.toggle()}</Grid>\n    </Grid>\n  )\n\n  disabled = () => (false);\n\n  render() {\n    const { client, url_error, username_error, password_error } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()}/>\n        <CardContent>\n          {(client.type === 'public')\n           ? (\n             <p>\n               {\"'Public' uses the \"}\n               <code>blockstream.info</code>\n               {' API. Switch to private to use a '}\n               <code>bitcoind</code>\n               {' node.'}\n             </p>\n           ) : (\n             <div>\n               <p>A <code>bitcoind</code>-compatible client is required to query UTXO data, estimate fees, and broadcast transactions.</p>\n               <p>\n                 <small>\n                   {'Due to CORS requirements, you must use a proxy around the node. Instructions are available '}\n                   {externalLink(\"https://github.com/unchained-capital/caravan#adding-cors-headers\", \"here\")}\n                   {'.'}\n                 </small>\n               </p>\n               <form>\n\n                 <Grid container direction=\"column\">\n\n                   <Grid item>\n                     <TextField\n                       fullWidth\n                       label=\"URL\"\n                       value={client.url}\n                       onChange={this.handleUrlChange}\n                       disabled={this.disabled()}\n                       error={url_error !== ''}\n                       helperText={url_error}\n                       InputProps={{\n                         startAdornment: <InputAdornment position=\"start\"></InputAdornment>,\n                       }}\n                     />\n                   </Grid>\n\n                   <Grid item>\n\n\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       fullWidth\n                       label=\"Username\"\n                       value={client.username}\n                       onChange={this.handleUsernameChange}\n                       disabled={this.disabled()}\n                       error={username_error}\n                       helperText={username_error}\n                     />\n                   </Grid>\n\n                   <Grid item>\n                     <TextField\n                       fullWidth\n                       type=\"password\"\n                       label=\"Password\"\n                       value={client.password}\n                       onChange={this.handlePasswordChange}\n                       disabled={this.disabled()}\n                       error={password_error}\n                       helperText={password_error}\n                     />\n                   </Grid>\n                 </Grid>\n               </form>\n             </div>\n           )}\n        </CardContent>\n      </Card>\n    );\n  }\n}\nClientPicker.propTypes = propTypes;\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    url_error: state.client.url_error,\n    url: state.client.url,\n  };\n}\n\nexport default connect(\n  mapStateToProps,\n  wrappedActions({\n    setType: SET_CLIENT_TYPE,\n    setUrl: SET_CLIENT_URL,\n    setUsername: SET_CLIENT_USERNAME,\n    setPassword: SET_CLIENT_PASSWORD,\n\n    setUrlError: SET_CLIENT_URL_ERROR,\n    setUsernameError: SET_CLIENT_USERNAME_ERROR,\n    setPasswordError: SET_CLIENT_PASSWORD_ERROR,\n\n    setStatus: SET_CLIENT_STATUS,\n  }),\n)(ClientPicker);\n","export const SET_CLIENT_TYPE = 'SET_CLIENT_TYPE';\nexport const SET_CLIENT_URL = 'SET_CLIENT_URL';\nexport const SET_CLIENT_USERNAME = 'SET_CLIENT_USERNAME';\nexport const SET_CLIENT_PASSWORD = 'SET_CLIENT_PASSWORD';\n\nexport const SET_CLIENT_URL_ERROR = 'SET_CLIENT_URL_ERROR';\nexport const SET_CLIENT_USERNAME_ERROR = 'SET_CLIENT_USERNAME_ERROR';\nexport const SET_CLIENT_PASSWORD_ERROR = 'SET_CLIENT_PASSWORD_ERROR';\n\nexport const SET_CLIENT_STATUS = 'SET_CLIENT_STATUS';\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {\n  satoshisToBitcoins,\n  blockExplorerAPIURL,\n} from \"unchained-bitcoin\";\n\n/**\n * Fetch information for signing transactions from block explorer API\n * @param {string} address - The address from which to obtain the information\n * @param {string} network - The network for the transaction to sign (mainnet|testnet)\n * @returns {multisig.UTXO} object for signing transaction inputs\n */\nexport async function blockExplorerGetAddresesUTXOs(address, network) {\n  try {\n    const utxosResult = await axios.get(blockExplorerAPIURL(`/address/${address}/utxo`, network));\n    const utxos = utxosResult.data;\n    return await Promise.all(utxos.map(async (utxo) => {\n      // FIXME: inefficient, need to cache here by utxo.txid\n      const transactionResult = await axios.get(blockExplorerAPIURL(`/tx/${utxo.txid}/hex`, network));\n      const transactionHex = transactionResult.data;\n      const amount = new BigNumber(utxo.value);\n      return {\n        confirmed: utxo.status.confirmed,\n        txid: utxo.txid,\n        index: utxo.vout,\n        amount: satoshisToBitcoins(amount).toFixed(8),\n        amountSats: amount,\n        transactionHex,\n      };\n    }));\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerGetFeeEstimate(network) {\n  try {\n    const feeEstimatesResult = await axios.get(blockExplorerAPIURL('/fee-estimates', network));\n    const feeEstimates = feeEstimatesResult.data;\n    return Math.ceil(feeEstimates[2]);\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\nexport async function blockExplorerBroadcastTransaction(transactionHex, network) {\n  try {\n    const broadcastResult = await axios.post(blockExplorerAPIURL('/tx', network), transactionHex);\n    return broadcastResult.data;\n  } catch(e) {\n    throw((e.response && e.response.data) || e);\n  }\n}\n\n/**\n * @module block_explorer\n */\n\n","import axios from 'axios';\nimport BigNumber from 'bignumber.js';\nimport {bitcoinsToSatoshis} from \"unchained-bitcoin\";\n\nasync function callBitcoind(url, auth, method, params = []) {\n  return new Promise(async (resolve, reject) => {\n    axios(url, {\n      method: 'post',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      auth,\n      data: {\n        jsonrpc: '2.0',\n        id: 0,\n        method: `${method}`,\n        params,\n      },\n    }).then(resp => resolve(resp.data)).catch(reject);\n\n\n  })\n}\n\n/**\n * Fetch information for signing transactions from bitcoind RPC\n * @param {Object} options - what is needed to communicate with the RPC\n * @param {string} options.url - where to connect\n * @param {AxiosBasicCredentials} options.auth - username and password\n * @param {string} options.address - The address from which to obtain the information\n * @returns {UTXO} object for signing transaction inputs\n */\nexport async function bitcoindListUnspent({url, auth, address}) {\n  return new Promise(async (resolve) => {\n    try {\n      const resp = await callBitcoind(url, auth, 'listunspent', [0, 9999999, [address]], );\n      const promises = [];\n      resp.result.forEach(utxo => {\n        promises.push(callBitcoind(url, auth, 'getrawtransaction', [utxo.txid]))\n      })\n      const previousTransactions = await Promise.all(promises)\n      resolve(resp.result.map((utxo, mapindex) => {\n        const amount = new BigNumber(utxo.amount);\n        return {\n          confirmed: (utxo.confirmations || 0) > 0,\n          txid: utxo.txid,\n          index: utxo.vout,\n          amount: amount.toFixed(8),\n          amountSats: bitcoinsToSatoshis(amount),\n          transactionHex: previousTransactions[mapindex].result\n        };\n      }));\n\n    } catch(e) {throw(e)}\n  });\n}\n\nexport async function bitcoindEstimateSmartFee({url, auth, numBlocks = 2}) {\n  const resp = await callBitcoind(url, auth, 'estimatesmartfee', [numBlocks]);\n  const feeRate = resp.result.feerate;\n  return Math.ceil(feeRate * 100000);\n}\n\nexport async function bitcoindSendRawTransaction({url, auth, hex}) {\n  try {\n    const resp = await callBitcoind(url, auth, 'sendrawtransaction', [hex]);\n    return resp.result;\n    } catch(e) {\n      console.log('send tx error', e)\n      throw((e.response && e.response.data.error.message) || e);\n  }\n\n}\n","import {\n  blockExplorerGetAddresesUTXOs,\n  blockExplorerGetFeeEstimate,\n  blockExplorerBroadcastTransaction,\n} from \"./block_explorer\";\nimport {\n  bitcoindListUnspent,\n  bitcoindEstimateSmartFee,\n  bitcoindSendRawTransaction,\n} from \"./bitcoind\";\n\nexport const BLOCK_EXPLORER = 'public';\nexport const BITCOIND = 'private';\n\nfunction bitcoindParams(client) {\n  const {url, username, password} = client;\n  const auth = { username, password };\n  return {url, auth};\n}\n\nexport function fetchAddressUTXOs(address, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetAddresesUTXOs(address, network);\n  } else {\n    return bitcoindListUnspent({\n      ...bitcoindParams(client),\n      ...{address}\n    });\n  }\n}\n\nexport function fetchFeeEstimate(network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerGetFeeEstimate(network);\n  } else {\n    return bitcoindEstimateSmartFee({\n      ...bitcoindParams(client),\n      ...{numBlocks: 1}\n    });\n  }\n}\n\nexport function broadcastTransaction(transactionHex, network, client) {\n  if (client.type === BLOCK_EXPLORER) {\n    return blockExplorerBroadcastTransaction(transactionHex, network);\n  } else {\n    return bitcoindSendRawTransaction({\n      ...bitcoindParams(client),\n      ...{hex: transactionHex}\n    });\n  }\n}\n","export const CHOOSE_PERFORM_SPEND = \"CHOOSE_PERFORM_SPEND\";\n\nexport const SET_REQUIRED_SIGNERS = 'SET_REQUIRED_SIGNERS';\nexport const SET_TOTAL_SIGNERS = 'SET_TOTAL_SIGNERS';\n\nexport const SET_INPUTS = 'SET_INPUTS';\n\nexport const ADD_OUTPUT = 'ADD_OUTPUT';\nexport const SET_OUTPUT_ADDRESS = 'SET_OUTPUT_ADDRESS';\nexport const SET_OUTPUT_AMOUNT = 'SET_OUTPUT_AMOUNT';\nexport const DELETE_OUTPUT = 'DELETE_OUTPUT';\n\nexport const SET_FEE_RATE = 'SET_FEE_RATE';\nexport const SET_FEE = 'SET_FEE';\n\nexport const FINALIZE_OUTPUTS = 'FINALIZE_OUTPUTS';\nexport const RESET_OUTPUTS = 'RESET_OUTPUTS';\n\nexport const SET_TXID = 'SET_TXID';\n\nexport function choosePerformSpend() {\n  return {\n    type: CHOOSE_PERFORM_SPEND,\n  };\n}\n\nexport function setRequiredSigners(number) {\n  return {\n    type: SET_REQUIRED_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setTotalSigners(number) {\n  return {\n    type: SET_TOTAL_SIGNERS,\n    value: number,\n  };\n}\n\nexport function setInputs(inputs) {\n  return {\n    type: SET_INPUTS,\n    value: inputs,\n  };\n}\n\nexport function addOutput() {\n  return {\n    type: ADD_OUTPUT,\n  };\n}\n\nexport function setOutputAddress(number, address) {\n  return {\n    type: SET_OUTPUT_ADDRESS,\n    number: number,\n    value: address,\n  };\n}\n\nexport function setOutputAmount(number, amountString) {\n  return {\n    type: SET_OUTPUT_AMOUNT,\n    number: number,\n    value: amountString,\n  };\n}\n\nexport function deleteOutput(number) {\n  return {\n    type: DELETE_OUTPUT,\n    number: number,\n  };\n}\n\nexport function setFeeRate(valueString) {\n  return {\n    type: SET_FEE_RATE,\n    value: valueString,\n  };\n}\n\nexport function setFee(valueString) {\n  return {\n    type: SET_FEE,\n    value: valueString,\n  };\n}\n\nexport function finalizeOutputs() {\n  return {\n    type: FINALIZE_OUTPUTS,\n  };\n}\n\nexport function resetOutputs() {\n  return {\n    type: RESET_OUTPUTS,\n  };\n}\n\n\nexport function setTXID(txid) {\n  return {\n    type: SET_TXID,\n    value: txid,\n  };\n}\n","export const CHOOSE_CONFIRM_OWNERSHIP = \"CHOOSE_CONFIRM_OWNERSHIP\";\nexport const SET_OWNERSHIP_MULTISIG               = \"SET_OWNERSHIP_MULTISIG\";\nexport const RESET_PUBLIC_KEY_IMPORTER            = \"RESET_PUBLIC_KEY_IMPORTER\";\nexport const RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH = \"RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_BIP32_PATH   = \"SET_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_PUBLIC_KEY_IMPORTER_METHOD       = \"SET_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY   = \"SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY\";\n\nexport function chooseConfirmOwnership() {\n  return {\n    type: CHOOSE_CONFIRM_OWNERSHIP,\n  };\n}\n\nexport function setOwnershipMultisig(value) {\n  return {\n    type: SET_OWNERSHIP_MULTISIG,\n    value,\n  };\n}\n\nexport function resetPublicKeyImporter() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER,\n  };\n}\n\nexport function resetPublicKeyImporterBIP32Path() {\n  return {\n    type: RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  };\n}\n\nexport function setPublicKeyImporterBIP32Path(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterMethod(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_METHOD,\n    value,\n  };\n}\n\nexport function setPublicKeyImporterPublicKey(value) {\n  return {\n    type: SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n    value,\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport BigNumber from 'bignumber.js';\nimport {\n  P2SH,\n  P2SH_P2WSH,\n  P2WSH,\n  generateMultisigFromHex,\n  validateHex,\n  multisigRequiredSigners,\n  multisigTotalSigners,\n} from 'unchained-bitcoin';\nimport { fetchAddressUTXOs } from '../../blockchain';\n\n// Components\nimport {\n  Box,\n  Grid,\n  Card,\n  CardHeader,\n  CardContent,\n  Button,\n  TextField,\n  FormHelperText,\n} from '@material-ui/core';\nimport MultisigDetails from \"../MultisigDetails\";\n\n// Actions\nimport {\n  setFrozen,\n} from '../../actions/settingsActions';\nimport {\n  choosePerformSpend,\n  setRequiredSigners,\n  setTotalSigners,\n  setInputs,\n} from '../../actions/transactionActions';\nimport {\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n} from \"../../actions/ownershipActions\";\n\nclass ScriptEntry extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    setFrozen: PropTypes.func.isRequired,\n    setRequiredSigners: PropTypes.func.isRequired,\n    setTotalSigners: PropTypes.func.isRequired,\n    setInputs: PropTypes.func.isRequired,\n    addressType: PropTypes.string.isRequired,\n    setOwnershipMultisig: PropTypes.func.isRequired,\n    chosePerformSpend: PropTypes.bool.isRequired,\n    choseConfirmOwnership: PropTypes.bool.isRequired,\n  };\n\n  state = {\n    scriptHex: '',\n    scriptError: '',\n    fetchUTXOsError: '',\n    fetchedUTXOs: false,\n  };\n\n  disabled = () => {\n\n  }\n\n  render() {\n    const { scriptHex, scriptError, fetchedUTXOs } = this.state;\n\n    return (\n      <Card>\n        <CardHeader title={`Enter ${this.scriptTitle()} Script`} />\n        <CardContent>\n          <form>\n            <TextField\n              fullWidth\n              multiline\n              autoFocus\n              variant=\"outlined\"\n              label={`${this.scriptTitle()} Script`}\n              value={scriptHex}\n              rows={5}\n              onChange={this.handleScriptChange}\n              disabled={fetchedUTXOs && (! this.hasFetchUTXOsError())}\n              helperText={scriptError}\n              error={scriptError!==''}\n            />\n          </form>\n\n          {(scriptHex !== '' && !this.hasScriptError())\n           ?\n           this.renderDetails()\n           :\n           <p>Enter a valid {this.scriptName()} script to generate an address to spend funds from.</p>}\n\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  hasScriptError = () => (this.state.scriptError !== '')\n  hasFetchUTXOsError = () => (this.state.fetchUTXOsError !== '')\n  hasError = () => (this.hasScriptError() || this.hasFetchUTXOsError())\n\n  //\n  // Script\n  //\n\n  scriptName = () => {\n    const {addressType} = this.props;\n    switch (addressType) {\n    case P2SH:\n      return \"redeem\";\n    case P2SH_P2WSH:\n      return \"witness\";\n    case P2WSH:\n      return \"witness\";\n    default:\n      return null;\n    }\n  }\n\n  scriptTitle = () => {\n    const scriptName = this.scriptName();\n    return scriptName.charAt(0).toUpperCase() + scriptName.substring(1);\n  }\n\n  handleScriptChange = (event) => {\n    const scriptHex = event.target.value;\n    let scriptError = '';\n\n    if (scriptHex === '') {\n      scriptError = `${this.scriptTitle()} script cannot be blank.`;\n    }\n\n    if (scriptError === '' && (scriptHex.includes('\\n') || scriptHex.includes('\\t') || scriptHex.includes(' '))) {\n      scriptError = `${this.scriptTitle()} script should not contain spaces, tabs, or newlines.`;\n    }\n\n    if (scriptError === '') {\n      const hexError = validateHex(scriptHex);\n      if (hexError !== '') {\n        scriptError = `${this.scriptTitle()} script is not valid hex.`;\n      }\n    }\n\n    if (scriptHex !== '' && scriptError === '') {\n      try {\n        this.generateMultisig(scriptHex);\n      } catch (parseError) {\n        console.error(parseError);\n        scriptError = `Failed to parse ${this.scriptName()} script.`;\n      }\n    }\n\n    this.setState({\n      scriptHex,\n      scriptError,\n      fetchUTXOsError: '',\n      fetchedUTXOs: false,\n    });\n  };\n\n  generateMultisig = (scriptHex) => {\n    const {network, addressType} = this.props;\n    if (! scriptHex) {\n      scriptHex = this.state.scriptHex;\n    }\n    return generateMultisigFromHex(network, addressType, scriptHex);\n  }\n\n  //\n  // Details\n  //\n\n  renderDetails = () => {\n    const { fetchUTXOsError } = this.state;\n    const { chosePerformSpend, choseConfirmOwnership } = this.props;\n    const multisig = this.generateMultisig();\n    const buttonsDisabled = (chosePerformSpend || choseConfirmOwnership);\n    return (\n      <div>\n        <MultisigDetails multisig={multisig} />\n\n        <Box mt={2}>\n\n          <Grid container spacing={3}>\n\n            <Grid item>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" onClick={this.performSpend} disabled={buttonsDisabled}>Spend from this address</Button>\n            </Grid>\n\n            <Grid item>\n              <Button variant=\"contained\" size=\"large\" onClick={this.confirmOwnership} disabled={buttonsDisabled}>Confirm ownership</Button>\n            </Grid>\n\n          </Grid>\n\n          <FormHelperText error>{fetchUTXOsError}</FormHelperText>\n\n        </Box>\n      </div>\n    );\n  }\n\n  //\n  // Perform Spend\n  //\n\n  performSpend = async () => {\n    const {setRequiredSigners, setTotalSigners, setInputs, setFrozen, choosePerformSpend} = this.props;\n    const multisig = this.generateMultisig();\n    const fetchUTXOsResult = await this.fetchUTXOs(multisig);\n    if (fetchUTXOsResult) {\n      const {utxos, inputsTotalSats} = fetchUTXOsResult;\n      let fetchUTXOsError = '';\n      if (inputsTotalSats.isLessThanOrEqualTo(0)) {\n        fetchUTXOsError = \"This address has a zero balance.\";\n      }\n      this.setState({\n        fetchedUTXOs: true,\n        fetchUTXOsError,\n      });\n      if (fetchUTXOsError === '') {\n        setInputs(utxos);\n        setRequiredSigners(multisigRequiredSigners(multisig));\n        setTotalSigners(multisigTotalSigners(multisig));\n        setFrozen(true);\n        choosePerformSpend();\n      }\n    } else {\n      this.setState({\n        fetchedUTXOs: false,\n        fetchUTXOsError: \"Failed to fetch UTXOs.\",\n      });\n    }\n  }\n\n  fetchUTXOs = async (multisig) => {\n    const {network, client} = this.props;\n    let utxos = null;\n    try {\n      utxos = await fetchAddressUTXOs(multisig.address, network, client);\n    } catch(e) {\n      console.error(e);\n      return false;\n    }\n    if (utxos !== null) {\n      return {\n        utxos: utxos.map((utxo) => ({...utxo, multisig})),\n        inputsTotalSats: utxos\n          .map((utxo) => utxo.amount)\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0)),\n      };\n    }\n    return false;\n  }\n\n  //\n  // Confirm Ownership\n  //\n\n  confirmOwnership = () => {\n    const {chooseConfirmOwnership, setOwnershipMultisig, setFrozen} = this.props;\n    setOwnershipMultisig(this.generateMultisig());\n    chooseConfirmOwnership();\n    setFrozen(true);\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...{client: state.client},\n    ...{\n      choseConfirmOwnership: state.spend.ownership.chosen,\n      chosePerformSpend: state.spend.transaction.chosen,\n    }\n  };\n}\n\nconst mapDispatchToProps = {\n  choosePerformSpend,\n  setFrozen,\n  setInputs,\n  setTotalSigners,\n  setRequiredSigners,\n  chooseConfirmOwnership,\n  setOwnershipMultisig,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ScriptEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  blockExplorerTransactionURL,\n  satoshisToBitcoins,\n} from \"unchained-bitcoin\";\nimport {externalLink} from \"../../utils\";\nimport Copyable from \"../Copyable\";\n\n// Components\nimport { \n  Card, CardHeader, CardContent,\n  Table, TableHead, TableBody, TableFooter,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport { OpenInNew } from '@material-ui/icons';\n\n// Assets\nimport 'react-table/react-table.css';\nimport styles from './styles.module.scss';\n\nclass UTXOSet extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n  };\n\n  render() {\n    const {inputs, inputsTotalSats} = this.props;\n    return (\n      <Card >\n        <CardHeader title={`Available Inputs (${inputs.length})`} />\n        <CardContent>\n          <p>The following UTXOs will be spent as inputs in a new transaction.</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                <TableCell>Number</TableCell>\n                <TableCell>TXID</TableCell>\n                <TableCell>Index</TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n                <TableCell>View</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderInputs()}\n            </TableBody>\n            <TableFooter>\n              <TableRow hover>\n                <TableCell colSpan={3}>\n                  TOTAL:\n                </TableCell>\n                <TableCell colSpan={2}>\n                  {satoshisToBitcoins(inputsTotalSats).toString()}\n                </TableCell>\n              </TableRow>\n            </TableFooter>\n          </Table>\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderInputs = () => {\n    const { inputs, network } = this.props;\n    return inputs.map((input, inputIndex) => {\n      const confirmedStyle = `${styles.utxoTxid}${input.confirmed ? '' : ' '+styles.unconfirmed}`;\n      const confirmedTitle = input.confirmed ? 'confirmed' : 'unconfirmed';\n      return (\n        <TableRow hover key={input.txid}>\n          <TableCell>\n            {inputIndex + 1}\n          </TableCell>\n          <TableCell className={confirmedStyle}>\n            <Copyable text={input.txid}>\n              <code title={confirmedTitle}>{input.txid}</code>\n            </Copyable>\n          </TableCell>\n          <TableCell>\n            <Copyable text={input.index.toString()} />\n          </TableCell>\n          <TableCell>\n            <Copyable text={satoshisToBitcoins(input.amountSats).toString()} />\n          </TableCell>\n          <TableCell>\n            {externalLink(blockExplorerTransactionURL(input.txid, network), <OpenInNew />)}\n          </TableCell>\n        </TableRow>\n      );\n    });\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...state.settings,\n    ...state.spend.transaction,\n  };\n}\n\nexport default connect(mapStateToProps)(UTXOSet);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  satoshisToBitcoins,\n  bitcoinsToSatoshis,\n  validateOutputAmountBTC,\n} from 'unchained-bitcoin';\nimport BigNumber from \"bignumber.js\";\n\n// Actions\nimport {\n  setOutputAddress,\n  setOutputAmount,\n  deleteOutput\n} from '../../actions/transactionActions';\n\n// Components\nimport { Grid, Tooltip, TextField, IconButton } from '@material-ui/core';\nimport { Delete, AddCircle, RemoveCircle } from '@material-ui/icons';\n\n// Assets\nimport styles from './styles.module.scss';\n\nclass OutputEntry extends React.Component {\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    amount: PropTypes.string.isRequired,\n    addressError: PropTypes.string.isRequired,\n    amountError: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    setAddress: PropTypes.func.isRequired,\n    setAmount: PropTypes.func.isRequired,\n    remove: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const {outputs, finalizedOutputs, address, amount, addressError, amountError} = this.props;\n\n    return (\n      <Grid container>\n\n        <Grid item xs={7}>\n          <TextField\n            fullWidth\n            placeholder=\"Address\"\n            name=\"destination\"\n            className={styles.outputsFormInput}\n            disabled={finalizedOutputs}\n            onChange={this.handleAddressChange}\n            value={address}\n            error={this.hasAddressError()}\n            helperText={addressError}\n          />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TextField\n            fullWidth\n            placeholder=\"Amount (BTC)\"\n            className={styles.outputsFormInput}\n            name=\"amount\"\n            disabled={finalizedOutputs}\n            onChange={this.handleAmountChange}\n            value={amount}\n            error={this.hasAmountError()}\n            helperText={amountError}\n            /* type=\"number\" */\n            /* InputProps={{ */\n            /*   min: \"0\",  */\n            /*   max: \"21000000\",  */\n            /*   step: \"0.00000001\" */\n            /* }} */\n          />\n        </Grid>\n\n        {(!finalizedOutputs) && this.hasBalanceError() && this.isBalanceable() &&\n         <Grid item xs={1}>\n           <Tooltip title={`${this.balanceAction()} to ${this.autoBalancedAmount().toString()}`} placement=\"top\">\n             <small>\n               <IconButton onClick={this.handleBalance}>\n                 {this.balanceAction() === \"Increase\" ? <AddCircle /> : <RemoveCircle />}\n               </IconButton>\n             </small>\n           </Tooltip>\n         </Grid>}\n\n        {(!finalizedOutputs) && outputs.length > 1 &&\n         <Grid item xs={1}>\n           <Tooltip title=\"Remove Output\" placement=\"top\">\n             <IconButton onClick={this.handleDelete}>\n               <Delete/>\n             </IconButton>\n           </Tooltip>\n         </Grid>}\n\n      </Grid>\n    );\n  }\n\n  //\n  // Address\n  //\n\n  handleAddressChange = (event) => {\n    const {number, setAddress} = this.props;\n    setAddress(number, event.target.value);\n  }\n\n  hasAddressError = () => {\n    const {addressError} = this.props;\n    return addressError !== '';\n  }\n\n  //\n  // Amount\n  //\n\n  handleAmountChange = (event) => {\n    const {number, setAmount} = this.props;\n    setAmount(number, event.target.value);\n  }\n\n  hasAmountError = () => {\n    const {amountError} = this.props;\n    return amountError !== '';\n  }\n\n  //\n  // Balance\n  //\n\n  isNotBalanceable = () => {\n    const {number, outputs, feeError, amountError, amount, inputsTotalSats} = this.props;\n    if (feeError !== '') { return true; }\n    for (var i = 0; i < outputs.length; i++) {\n      if (i !== (number - 1)) {\n        if (outputs[i].amountError !== '' || outputs[i].amount === '') {\n          return true;\n        }\n      }\n    }\n    const newAmount = this.autoBalancedAmount();\n    if (validateOutputAmountBTC(newAmount, inputsTotalSats) !== '') { return true; }\n    if (amountError === '' && (newAmount === new BigNumber(amount))) { return true; }\n    return false;\n  }\n\n  isBalanceable = () => (!this.isNotBalanceable())\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  autoBalancedAmount = () => {\n    const {number, fee, inputsTotalSats, outputs} = this.props;\n    const outputTotalSats = outputs\n          .filter((output, i) => i !== number - 1)\n          .map((output) => bitcoinsToSatoshis(new BigNumber(output.amount)))\n          .reduce(\n            (accumulator, currentValue) => accumulator.plus(currentValue),\n            new BigNumber(0));\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    return satoshisToBitcoins(inputsTotalSats.minus(outputTotalSats.plus(feeSats)));\n  }\n\n  balanceAction = () => {\n    const {amount} = this.props;\n    if ((!this.hasBalanceError()) || this.isNotBalanceable()) {return null; }\n    return (this.autoBalancedAmount() > (new BigNumber(amount))) ? \"Increase\" : \"Decrease\";\n  }\n\n  handleBalance = () => {\n    const {number, setAmount} = this.props;\n    setAmount(number, this.autoBalancedAmount().toString());\n  }\n\n  //\n  // State\n  //\n\n  hasError = () => {\n    return this.hasAddressError() || this.hasAmountError();\n  }\n\n  handleDelete = () => {\n    const {number, remove} = this.props;\n    remove(number);\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...state.spend.transaction,\n    ...state.spend.transaction.outputs[ownProps.number - 1],\n  };\n}\n\nconst mapDispatchToProps =  {\n  setAddress: setOutputAddress,\n  setAmount: setOutputAmount,\n  remove: deleteOutput,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputEntry);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { map } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { fetchFeeEstimate } from '../../blockchain';\nimport {\n  bitcoinsToSatoshis,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\n\n// Actions\nimport {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n} from '../../actions/transactionActions';\n\n// Components\nimport {\n  Card, CardHeader, CardContent,\n  Grid, Button, Tooltip, TextField,\n  Box, IconButton, InputAdornment,\n} from \"@material-ui/core\";\nimport {Speed} from \"@material-ui/icons\";\nimport OutputEntry from './OutputEntry';\n\nclass OutputsForm extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    fee: PropTypes.string.isRequired,\n    feeRate: PropTypes.string.isRequired,\n    finalizedOutputs: PropTypes.bool.isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    setFeeRate: PropTypes.func.isRequired,\n    setFee: PropTypes.func.isRequired,\n    addOutput: PropTypes.func.isRequired,\n    setOutputAmount: PropTypes.func.isRequired,\n    resetOutputs: PropTypes.func.isRequired,\n    finalizeOutputs: PropTypes.func.isRequired,\n    feeRateError: PropTypes.string.isRequired,\n    feeError: PropTypes.string.isRequired,\n    balanceError: PropTypes.string.isRequired,\n  };\n\n  state = {\n    feeRateFetchError: '',\n  };\n\n  componentDidMount = () => {\n    this.initialOutputState();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const { signatureImporters } = this.props;\n    const finalizedCount = Object.keys(signatureImporters).reduce((o, k) => o + (signatureImporters[k].finalized), 0);\n    if(finalizedCount === 0) this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  async initialOutputState() {\n    await this.getFeeEstimate();\n    const {inputsTotalSats, fee, setOutputAmount} = this.props;\n    const feeSats = bitcoinsToSatoshis(new BigNumber(fee));\n    const outputAmount = satoshisToBitcoins(inputsTotalSats.minus(feeSats));\n    setOutputAmount(1, outputAmount.toFixed(8));\n  }\n\n  render() {\n    const {feeRate, fee, finalizedOutputs, feeRateError, feeError, balanceError} = this.props;\n    const {feeRateFetchError} = this.state;\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Define Outputs\"/>\n        <CardContent>\n            <Box>\n              <Grid>\n              {this.renderOutputs()}\n              </Grid>\n\n              <Grid item container spacing={1}>\n\n                <Grid item xs={4}>\n                  <Button\n                    variant=\"contained\"\n                    disabled={finalizedOutputs}\n                    onClick={this.handleAddOutput}\n                  >\n                    Add output\n                  </Button>\n                </Grid>\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Fee Rate (Sats/byte)\"\n                    value={feeRate}\n                    placeholder=\"Sats/byte\"\n                    name=\"fee_rate\"\n                    disabled={finalizedOutputs}\n                    onChange={this.handleFeeRateChange}\n                    error={this.hasFeeRateError()}\n                    helperText={feeRateFetchError || feeRateError}\n                    /* type=\"number\" */\n                    InputProps={{\n                      /* min: \"0\", */\n                      /* max: \"1000\", */\n                      /* step: \"any\", */\n                      endAdornment: <InputAdornment position=\"end\">\n                                      <Tooltip placement='top' title='Estimate best rate'>\n                                        <small>\n                                          <IconButton onClick={this.getFeeEstimate}  disabled={finalizedOutputs}>\n                                            <Speed />\n                                          </IconButton>\n                                        </small>\n                                      </Tooltip>\n                                    </InputAdornment>,\n                    }}\n                  />\n                </Grid>\n\n\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Estimated Fees (BTC)\"\n                    placeholder=\"BTC\"\n                    name=\"fee_total\"\n                    disabled={finalizedOutputs}\n                    value={fee}\n                    onChange={this.handleFeeChange}\n                    error={this.hasFeeError()}\n                    helperText={feeError}\n                    /* type=\"number\" */\n                    /* InputProps={{ */\n                    /*   min: \"0.00000001\", */\n                    /*   max: \"0.025\", */\n                    /*   step: \"0.00000001\", */\n                    /* }} */\n                  />\n                </Grid>\n\n                <Grid item xs={2}/>\n\n              </Grid>\n\n              <Grid item container spacing={1}>\n                <Grid item xs={4}/>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Inputs Total\"\n                    readOnly={true}\n                    defaultValue={this.inputsTotal().toString()}\n                    disabled={finalizedOutputs}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={3}>\n                  <TextField\n                    fullWidth\n                    label=\"Outputs & Fee Total\"\n                    value={this.outputsAndFeeTotal().toString()}\n                    error={this.hasBalanceError()}\n                    disabled={finalizedOutputs}\n                    helperText={balanceError}\n                    InputProps={{\n                      readOnly: true,\n                    }}\n                  />\n                </Grid>\n                <Grid item xs={2}/>\n              </Grid>\n\n              <Grid item>\n\n                <Grid container spacing={3}>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={this.gatherSignaturesDisabled()}\n                      onClick={this.handleFinalize}\n                    >\n                      Gather Signatures\n                    </Button>\n                  </Grid>\n\n                  <Grid item>\n                    <Button\n                      variant=\"contained\"\n                      color=\"secondary\"\n                      disabled={finalizedOutputs}\n                      onClick={this.handleReset}\n                    >\n                      Reset Outputs\n                    </Button>\n                  </Grid>\n\n                </Grid>\n\n              </Grid>\n\n            </Box>\n\n\n\n        </CardContent>\n      </Card>\n    );\n  }\n\n  renderOutputs = () => {\n    const { outputs } = this.props;\n    return map(outputs).map((output, i) => (\n      <Grid container key={i}>\n        <OutputEntry number={i+1} />\n      </Grid>\n    ));\n  }\n\n  inputsTotal = () => {\n    const {inputsTotalSats} = this.props;\n    return satoshisToBitcoins(inputsTotalSats);\n  }\n\n  outputsAndFeeTotal = () => {\n    const {outputs, fee} = this.props;\n    return outputs\n      .map((output) => new BigNumber(output.amount || 0))\n      .reduce(\n        (accumulator, currentValue) => accumulator.plus(currentValue),\n        new BigNumber(0))\n      .plus(new BigNumber(fee));\n  }\n\n  hasFeeRateFetchError = () => {\n    const {feeRateFetchError} = this.state;\n    return feeRateFetchError !== '';\n  }\n\n  hasFeeRateError = () => {\n    const {feeRateError} = this.props;\n    return feeRateError !== '';\n  }\n\n  hasFeeError = () => {\n    const {feeError} = this.props;\n    return feeError !== '';\n  }\n\n  hasBalanceError = () => {\n    const {balanceError} = this.props;\n    return balanceError !== '';\n  }\n\n  hasError = () => {\n    return (\n      this.hasFeeRateFetchError()\n        || this.hasFeeRateError()\n        || this.hasFeeError()\n        || this.hasBalanceError()\n    );\n  }\n\n  handleAddOutput = () => {\n    const {addOutput} = this.props;\n    addOutput();\n  };\n\n  handleFeeRateChange = (event) => {\n    const {setFeeRate} = this.props;\n    setFeeRate(event.target.value);\n  }\n\n  handleFeeChange = (event) => {\n    const {setFee} = this.props;\n    setFee(event.target.value);\n  }\n\n  handleFinalize = () => {\n    const { finalizeOutputs } = this.props;\n    finalizeOutputs();\n  };\n\n  handleReset = () => {\n    const { resetOutputs } = this.props;\n    resetOutputs();\n    this.initialOutputState();\n  }\n\n  getFeeEstimate = async () => {\n    const {client, network, setFeeRate} = this.props;\n    let newFeeRate = 1;\n    let feeRateFetchError = '';\n    try {\n      newFeeRate = await fetchFeeEstimate(network, client);\n    } catch (e){\n      console.error(e);\n      feeRateFetchError = 'There was an error fetching the fee rate.';\n    } finally {\n      setFeeRate(newFeeRate.toString());\n      this.setState({feeRateFetchError});\n    }\n  }\n\n  gatherSignaturesDisabled = () => {\n    const {finalizedOutputs, outputs} = this.props;\n    if (finalizedOutputs || this.hasError()) { return true; }\n    for (var i=0; i < outputs.length; i++) {\n      const output = outputs[i];\n      if (output.address === '' || output.amount === '' || output.addressError !== '' || output.amountError !== '') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    ...{\n      network: state.settings.network,\n      client: state.client,\n      },\n    ...state.spend.transaction,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n  };\n}\n\nconst mapDispatchToProps = {\n  addOutput,\n  setOutputAmount,\n  setFeeRate,\n  setFee,\n  finalizeOutputs,\n  resetOutputs,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OutputsForm);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Components\nimport {\n  Box,\n  TextField,\n  Button,\n} from '@material-ui/core';\n\nclass TextSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    signatureImporter: PropTypes.shape({}).isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n  };\n\n  state = {\n    signatureJSON: '',\n    error: '',\n  };\n\n  render = () => {\n    const { signatureJSON, error } = this.state;\n    return (\n      <Box mt={2}>\n        <TextField\n          fullWidth\n          multiline\n          variant=\"outlined\"\n          name=\"signature\"\n          label=\"Signature\"\n          rows={5}\n          value={signatureJSON}\n          onChange={this.handleChange}\n          error={this.hasError()}\n          helperText={error}\n        />\n\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            size=\"large\"\n            onClick={this.finalize}\n            disabled={signatureJSON === ''}\n          >\n            Add Signature\n          </Button>\n        </Box>\n      </Box>\n    );\n  }\n\n  hasError = () => {\n    return this.state.error !== '';\n  }\n\n  setError = (value) => {\n    this.setState({error: value});\n  }\n\n  handleChange = (event) => {\n    const signatureJSON = event.target.value;\n    let error = '';\n    try {\n      JSON.parse(signatureJSON);\n    } catch(parseError) {\n      error = \"Invalid JSON.\";\n    }\n    this.setState({signatureJSON, error});\n  }\n\n  finalize = () => {\n    const {validateAndSetSignature} = this.props;\n    const {signatureJSON} = this.state;\n    validateAndSetSignature(\n      JSON.parse(signatureJSON),\n      this.setError);\n  }\n\n}\n\nexport default TextSignatureImporter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Components\nimport QRCode from \"qrcode.react\";\nimport Copyable from \"../Copyable\";\n\nclass HermitDisplayer extends React.Component {\n\n  static propTypes = {\n    string: PropTypes.string.isRequired,\n    width: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    string: '',\n    width: 120,\n  }\n\n  state = {\n    errorMessage: '',\n  };\n\n  render = () => {\n    const {width, string} = this.props;\n    return (\n      <Copyable text={string} newline={true}>\n        <QRCode size={width} value={string} level={'L'} />\n      </Copyable>\n    );\n  }\n\n}\n\nexport default HermitDisplayer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  PENDING,\n  UNSUPPORTED,\n  HermitSignTransaction,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Grid,\n  Box,\n  TextField,\n  Button,\n  FormHelperText,\n} from '@material-ui/core';\nimport HermitReader from \"../Hermit/HermitReader\";\nimport HermitDisplayer from \"../Hermit/HermitDisplayer\";\nimport WalletFeedback from '../WalletFeedback';\n\nclass HermitSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      bip32PathError: '',\n      bip32PathFinalized: false,\n      signatureError: '',\n      walletState: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  interaction = () => {\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    // Sign all inputs with the same BIP32 path because we currently\n    // assume each input is attached to the same address, hence redeem\n    // script, hence public key, hence BIP32 path.\n    //\n    // This will need to be changed if we are signing inputs across\n    // addresses.\n    const bip32Paths = inputs.map((input) => (signatureImporter.bip32Path));\n    return new HermitSignTransaction({network, inputs, outputs, bip32Paths});\n  }\n\n  render = () => {\n    const {signatureImporter, disableChangeMethod, resetBIP32Path} = this.props;\n    const {bip32PathError, signatureError, walletState} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return (\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n      );\n    }\n    return (\n      <Box mt={2}>\n\n        <Grid container>\n\n          <Grid item md={10}>\n            <TextField\n              name=\"bip32Path\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING}\n              error={this.hasBIP32PathError()}\n              helperText={bip32PathError}\n            />\n          </Grid>\n\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() && \n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={resetBIP32Path} disabled={walletState !== PENDING}>Default</Button>}\n          </Grid>\n\n        </Grid>\n\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n\n\n         <Box mt={2}>\n\n           <Grid container justify=\"center\">\n             <Grid item>\n               <HermitDisplayer width={400} string={interaction.messageFor({code: \"hermit.signature_request\"}).encodedData} />\n             </Grid>\n           </Grid>\n\n           <HermitReader\n             startText=\"Scan Signature QR Code\"\n             interaction={interaction}\n             onStart={disableChangeMethod}\n             onSuccess={this.import}\n             onClear={this.clear} />\n\n           <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"hermit.signature_request\", \"hermit.command\"]}/>\n\n           <FormHelperText error>{signatureError}</FormHelperText>\n         </Box>\n      </Box>\n    );\n  }\n\n  import = (signature) => {\n    console.log(\"IMPORTED SIGNATURE:\", signature);\n    const { validateAndSetSignature, enableChangeMethod } = this.props;\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n    validateAndSetSignature(\n      signature,\n      (signatureError) => {this.setState({signatureError});}\n    );\n  }\n\n  clear = () => {\n    const { resetBIP32Path, enableChangeMethod } = this.props;\n    resetBIP32Path();\n    this.setState({signatureError: ''});\n    enableChangeMethod();\n  }\n\n  hasBIP32PathError = () => (this.state.bip32PathError !== '')\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, (bip32PathError) => {this.setState({bip32PathError});});\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n}\n\nexport default HermitSignatureImporter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  multisigRequiredSigners,\n  multisigPublicKeys,\n  satoshisToBitcoins,\n} from 'unchained-bitcoin';\nimport {\n  PENDING,\n  UNSUPPORTED,\n  ACTIVE,\n  ERROR,\n  HardwareWalletExportPublicKey,\n  HardwareWalletSignMultisigTransaction,\n} from 'unchained-wallets';\n\n// Components\nimport {\n  Button, TextField, FormHelperText,\n  Box, Grid,\n  Table, TableHead, TableBody,\n  TableRow, TableCell,\n} from '@material-ui/core';\nimport {Error} from \"@material-ui/icons\";\nimport WalletFeedback from '../WalletFeedback';\n\nclass HardwareWalletSignatureImporter extends React.Component {\n\n  static propTypes =  {\n    network: PropTypes.string.isRequired,\n    inputsTotalSats: PropTypes.object.isRequired,\n    inputs: PropTypes.array.isRequired,\n    outputs: PropTypes.array.isRequired,\n    fee: PropTypes.string.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    validateAndSetBIP32Path: PropTypes.func.isRequired,\n    validateAndSetSignature: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    defaultBIP32Path: PropTypes.string.isRequired,\n    enableChangeMethod: PropTypes.func.isRequired,\n    disableChangeMethod: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      verified: false,\n      verifyError: '',\n      signatureError: '',\n      bip32PathError: '',\n      walletState: (this.interaction(true).isSupported() ? PENDING : UNSUPPORTED),\n    };\n  }\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n  }\n\n  interaction = (inConstructor) => {\n    const verified = (inConstructor ? false : this.state.verified);\n    const {signatureImporter, network, inputs, outputs} = this.props;\n    const walletType = signatureImporter.method;\n    if (verified) {\n      // Sign all inputs with the same BIP32 path because we currently\n      // assume each input is attached to the same address, hence\n      // redeem script, hence public key, hence BIP32 path.\n      //\n      // This will need to be changed if we are signing inputs across\n      // addresses.\n      const bip32Paths = inputs.map((input) => (signatureImporter.bip32Path));\n      return HardwareWalletSignMultisigTransaction({network, walletType, inputs, outputs, bip32Paths});\n    } else {\n      return HardwareWalletExportPublicKey({network, walletType, bip32Path: signatureImporter.bip32Path});\n    }\n  }\n\n  render = () => {\n    const {signatureImporter} = this.props;\n    const {verified, walletState} = this.state;\n    const interaction = this.interaction();\n    if (walletState === UNSUPPORTED) {\n      return <FormHelperText error>{interaction.messageTextFor({walletState})}</FormHelperText>;\n    }\n    return (\n      <Box mt={2}>\n        <Grid container>\n          <Grid item md={10}>\n            <TextField\n              fullWidth\n              name=\"bip32Path\"\n              label=\"BIP32 Path\"\n              type=\"text\"\n              value={signatureImporter.bip32Path}\n              onChange={this.handleBIP32PathChange}\n              disabled={walletState !== PENDING || verified}\n              error={this.hasBIP32PathError()}\n              helperText={this.bip32PathError()}\n            />\n\n          </Grid>\n          <Grid item md={2}>\n            {!this.bip32PathIsDefault() &&\n             <Button type=\"button\" variant=\"contained\" size=\"small\" onClick={this.resetBIP32Path} disabled={verified || walletState !== PENDING}>Default</Button>}\n          </Grid>\n        </Grid>\n        <FormHelperText>Use the default value if you don&rsquo;t understand BIP32 paths.</FormHelperText>\n        <Box mt={2}>\n          {this.renderAction()}\n        </Box>\n        {this.renderDeviceConfirmInfo()}\n        <WalletFeedback messages={interaction.messagesFor({walletState})} excludeCodes={[\"bip32\"]}/>\n      </Box>\n    );\n  }\n\n  renderDeviceConfirmInfo = () => {\n    const {fee, inputsTotalSats} = this.props;\n    const {verified, walletState} = this.state;\n\n    if (verified && walletState === ACTIVE) {\n      return (\n        <Box>\n          <p>Your device will ask you to verify the following information:</p>\n          <Table>\n            <TableHead>\n              <TableRow hover>\n                 <TableCell></TableCell>\n                <TableCell>Amount (BTC)</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTargets()}\n              <TableRow hover>\n                <TableCell>Fee</TableCell>\n                <TableCell>{fee}</TableCell>\n              </TableRow>\n              <TableRow hover>\n                <TableCell>Total</TableCell>\n                <TableCell>{satoshisToBitcoins(inputsTotalSats).toString()}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </Box>\n      );\n    } else return '';\n  }\n\n  renderTargets = () => {\n    const { outputs } = this.props;\n    return outputs.map((output, i) => {\n      return (\n      <TableRow hover key={i}>\n        <TableCell>Address <code>{output.address}</code></TableCell>\n        <TableCell>{output.amount}</TableCell>\n      </TableRow>\n      );\n    });\n  }\n\n  renderAction = () => {\n    const {verified, verifyError, signatureError, walletState} = this.state;\n    if (verified) {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" color=\"primary\" onClick={this.sign} disabled={walletState !== PENDING}>Sign</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{signatureError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    } else {\n      return (\n        <Grid container alignItems=\"center\">\n          <Grid item md={3}>\n            <Button variant=\"contained\" size=\"large\" onClick={this.verify} color=\"primary\" disabled={walletState !== PENDING || this.hasBIP32PathError()}>Verify</Button>\n          </Grid>\n          <Grid item md={9}>\n            <FormHelperText error>{verifyError}</FormHelperText>\n          </Grid>\n        </Grid>\n      );\n    }\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  hasBIP32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    return (bip32PathError !== '' || this.interaction().hasMessagesFor({walletState, level: ERROR, code: \"bip32\"}));\n  }\n\n  bip32PathError = () => {\n    const {bip32PathError, walletState} = this.state;\n    if (bip32PathError !== '') { return bip32PathError; }\n    return this.interaction().messageTextFor({walletState, level: ERROR, code: \"bip32\"});\n  }\n\n  setBIP32PathError = (value) => {\n    this.setState({bip32PathError: value});\n  }\n\n  handleBIP32PathChange = (event) => {\n    const {validateAndSetBIP32Path} = this.props;\n    const bip32Path = event.target.value;\n    validateAndSetBIP32Path(bip32Path, () => {}, this.setBIP32PathError);\n  }\n\n  bip32PathIsDefault = () => {\n    const {signatureImporter, defaultBIP32Path} = this.props;\n    return signatureImporter.bip32Path === defaultBIP32Path;\n  }\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    this.setBIP32PathError('');\n    resetBIP32Path();\n  }\n\n  //\n  // Verify\n  //\n\n  verify = async () => {\n    const { disableChangeMethod, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({verifyError: '', walletState: ACTIVE});\n\n    try {\n      const publicKey = await this.interaction().run();\n      this.verifyPublicKey(publicKey);\n    } catch(e) {\n      console.error(e);\n      this.setState({verifyError: e.message, walletState: PENDING});\n      enableChangeMethod();\n    }\n  }\n\n  verifyPublicKey = (publicKey) => {\n    const {inputs, signatureImporters, enableChangeMethod} = this.props;\n\n    let verifyError = '';\n\n    for (let inputIndex=0; inputIndex < inputs.length; inputIndex++) {\n      const input = inputs[inputIndex];\n      const publicKeyIndex = multisigPublicKeys(input.multisig).indexOf(publicKey);\n      if (publicKeyIndex < 0) {\n        verifyError = <span><Error />&nbsp; This device does not contain the correct key.  Are you sure the BIP32 path is correct?</span>;\n        break;\n      }\n\n      for (let signatureImporterNum=1; signatureImporterNum < multisigRequiredSigners(input.multisig); signatureImporterNum++) {\n        const otherSignatureImporter = signatureImporters[signatureImporterNum];\n        for(let otherPublicKeyIndex=0; otherPublicKeyIndex < otherSignatureImporter.publicKeys.length; otherPublicKeyIndex++){\n          const otherPublicKey = otherSignatureImporter.publicKeys[otherPublicKeyIndex];\n          if (otherPublicKey === publicKey) {\n            verifyError = <span><Error />A signature from this key was already imported.</span>;\n            break;\n          }\n        }\n        if (verifyError !== '') { break; }\n      }\n      if (verifyError !== '') { break; }\n    }\n\n    this.setState({\n      verified: (verifyError === ''),\n      verifyError,\n      walletState: PENDING,\n    });\n    enableChangeMethod();\n  }\n\n  //\n  // Sign\n  //\n\n  sign = async () => {\n    const { disableChangeMethod, validateAndSetSignature, enableChangeMethod } = this.props;\n    disableChangeMethod();\n    this.setState({signatureError: '', walletState: ACTIVE});\n\n    try {\n      const signature = await this.interaction().run();\n      validateAndSetSignature(\n        signature,\n        (signatureError) => {\n          const stateUpdate = {signatureError};\n          if (signatureError !== '') stateUpdate.walletState = PENDING;\n          this.setState(stateUpdate);\n        });\n    } catch(e) {\n      console.error(e);\n      this.setState({signatureError: e.message, walletState: PENDING});\n    }\n    enableChangeMethod();\n  }\n\n}\n\nexport default HardwareWalletSignatureImporter;\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const RESET_SIGNATURES = 'RESET_SIGNATURES';\n\nexport const SET_SIGNATURE_IMPORTER_NAME        = \"SET_SIGNATURE_IMPORTER_NAME\";\nexport const SET_SIGNATURE_IMPORTER_METHOD      = \"SET_SIGNATURE_IMPORTER_METHOD\";\nexport const SET_SIGNATURE_IMPORTER_BIP32_PATH  = \"SET_SIGNATURE_IMPORTER_BIP32_PATH\";\nexport const SET_SIGNATURE_IMPORTER_PUBLIC_KEYS = \"SET_SIGNATURE_IMPORTER_PUBLIC_KEYS\";\nexport const SET_SIGNATURE_IMPORTER_SIGNATURE   = \"SET_SIGNATURE_IMPORTER_SIGNATURE\";\nexport const SET_SIGNATURE_IMPORTER_FINALIZED   = \"SET_SIGNATURE_IMPORTER_FINALIZED\";\nexport const SET_SIGNATURE_IMPORTER_COMPLETE    = \"SET_SIGNATURE_IMPORTER_COMPLETE\";\n\nexport const {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} = wrappedNumberedActions({\n  setSignatureImporterName: SET_SIGNATURE_IMPORTER_NAME,\n  setSignatureImporterMethod: SET_SIGNATURE_IMPORTER_METHOD,\n  setSignatureImporterBIP32Path: SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  setSignatureImporterPublicKeys: SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  setSignatureImporterSignature: SET_SIGNATURE_IMPORTER_SIGNATURE,\n  setSignatureImporterFinalized: SET_SIGNATURE_IMPORTER_FINALIZED,\n  setSignatureImporterComplete: SET_SIGNATURE_IMPORTER_COMPLETE,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validateHex,\n  validateMultisigSignature,\n  multisigBIP32Path,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  Button,\n  Box,\n  FormControl,\n} from '@material-ui/core';\nimport Copyable from \"../Copyable\";\nimport TextSignatureImporter from \"./TextSignatureImporter\";\nimport HermitSignatureImporter from \"./HermitSignatureImporter\";\nimport HardwareWalletSignatureImporter from \"./HardwareWalletSignatureImporter\";\nimport EditableName from \"../EditableName\";\n\n// Actions\nimport {\n  setSignatureImporterName,\n  setSignatureImporterMethod,\n  setSignatureImporterBIP32Path,\n  setSignatureImporterPublicKeys,\n  setSignatureImporterSignature,\n  setSignatureImporterFinalized,\n  setSignatureImporterComplete,\n} from \"../../actions/signatureImporterActions\";\n\nimport 'react-table/react-table.css';\n\nconst TEXT = \"text\";\n\nclass SignatureImporter extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    number: PropTypes.number.isRequired,\n    signatureImporter: PropTypes.shape({}).isRequired,\n    signatureImporters: PropTypes.shape({}).isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    inputsTotalSats:  PropTypes.object.isRequired,\n    outputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    unsignedTransaction: PropTypes.object.isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    fee: PropTypes.string.isRequired,\n    txid: PropTypes.string.isRequired,\n    setName: PropTypes.func.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    setSignature: PropTypes.func.isRequired,\n    setPublicKeys: PropTypes.func.isRequired,\n    setFinalized: PropTypes.func.isRequired,\n    setComplete: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n    showUnsignedTransaction: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    const {number} = this.props;\n    if (number === this.getCurrent()) {\n      this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  render() {\n    const { signatureImporter } = this.props;\n    return (\n      <Card>\n        <CardHeader title={this.title()} ref={this.titleRef}/>\n        <CardContent>\n          {signatureImporter.finalized ? this.renderSignature() : this.renderImport()}\n          <Box mt={2}>\n            {this.renderUnsignedTransaction()}\n          </Box>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  title = () => {\n    const {number, signatureImporter, setName} = this.props;\n    return <EditableName number={number} name={signatureImporter.name} setName={setName} />;\n  }\n\n  getCurrent() {\n    const { signatureImporters } = this.props;\n    return Object.keys(signatureImporters).reduce((o, k) => {\n      return o + (signatureImporters[k].finalized ? 1 : 0)\n    }, 1);\n  }\n\n  renderImport = () => {\n    const { signatureImporter, number } = this.props;\n    const currentNumber = this.getCurrent();\n    const notMyTurn =  (number > currentNumber);\n    const { disableChangeMethod } = this.state;\n    const labelId = `signature-${number}-importer-select-label`;\n    if (notMyTurn) {\n      return (\n        <p>\n          Once you have imported the signature above, you will be able to import another signature here.\n        </p>\n      );\n    }\n\n    return (\n      <form>\n\n        <FormControl fullWidth>\n          <InputLabel id={labelId}>Select Method</InputLabel>\n\n          <Select\n            labelId={labelId}\n            id={`signature-${number}-importer-select`}\n            disabled={disableChangeMethod}\n            value={signatureImporter.method}\n            onChange={this.handleMethodChange}\n          >\n            <MenuItem value=\"\">{'< Select method >'}</MenuItem>\n            <MenuItem value={TREZOR}>Trezor</MenuItem>\n            <MenuItem value={LEDGER}>Ledger</MenuItem>\n            <MenuItem value={HERMIT}>Hermit</MenuItem>\n            <MenuItem value={TEXT}>Enter as text</MenuItem>\n          </Select>\n        </FormControl>\n\n        {this.renderImportByMethod()}\n\n      </form>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, signatureImporter, signatureImporters, inputs, inputsTotalSats,  outputs, fee} = this.props;\n    if (signatureImporter.method === TEXT) {\n      return <TextSignatureImporter\n                               signatureImporter={signatureImporter}\n                               validateAndSetSignature={this.validateAndSetSignature} />;\n    }\n    if (signatureImporter.method === HERMIT) {\n      return <HermitSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               inputs={inputs}\n               outputs={outputs}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    if (signatureImporter.method === TREZOR || signatureImporter.method === LEDGER) {\n      return <HardwareWalletSignatureImporter\n               network={network}\n               signatureImporter={signatureImporter}\n               signatureImporters={signatureImporters}\n               inputs={inputs}\n               outputs={outputs}\n               inputsTotalSats={inputsTotalSats}\n               fee={fee}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={this.defaultBIP32Path()}\n               validateAndSetSignature={this.validateAndSetSignature}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { number, setMethod } = this.props;\n    setMethod(number, event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // Unsigned Transaction\n  //\n\n  renderUnsignedTransaction = () => {\n    const {showUnsignedTransaction} = this.state;\n    const {unsignedTransaction} = this.props;\n    if (showUnsignedTransaction) {\n      const hex = unsignedTransaction.toHex();\n      return (\n        <div>\n          <p><Copyable text={hex}><code>{hex}</code></Copyable></p>\n          <small>\n            <Button size=\"small\" onClick={this.handleHideUnsignedTransaction}>\n              Hide Unsigned Transaction\n            </Button>\n          </small>\n        </div>\n\n      );\n    } else {\n      return (\n        <small>\n          <Button size=\"small\" onClick={this.handleShowUnsignedTransaction}>\n            Show Unsigned Transaction\n          </Button>\n        </small>\n      );\n    }\n  }\n\n  handleShowUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: true});\n  }\n\n  handleHideUnsignedTransaction = () => {\n    this.setState({showUnsignedTransaction: false});\n  }\n\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { number, setSignature, setPublicKeys, setFinalized } = this.props;\n    setSignature(number, '');\n    setPublicKeys(number, []);\n    setFinalized(number, false);\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  defaultBIP32Path = () => {\n    const {addressType, network} = this.props;\n    return multisigBIP32Path(addressType, network);\n  }\n\n  resetBIP32Path = () => {\n    const {number, setBIP32Path} = this.props;\n    setBIP32Path(number, this.defaultBIP32Path());\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {number, setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(number, bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Signature\n  //\n\n  renderSignature = () => {\n    const { signatureImporter, txid  } = this.props;\n    const signatureJSON =  JSON.stringify(signatureImporter.signature);\n    return (\n      <div>\n        <p>The following signature was imported:</p>\n        <Box>\n          <Copyable text={signatureJSON}>\n            <small><code>{signatureJSON}</code></small>\n          </Copyable>\n        </Box>\n        <Box mt={2}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            disabled={txid !== \"\"}\n            size=\"small\"\n            onClick={this.reset}\n          >\n            Remove Signature\n          </Button>\n        </Box>\n\n      </div>\n    );\n  }\n\n  validateAndSetSignature = (inputsSignatures, errback) => {\n    const {number, inputs, signatureImporters, unsignedTransaction, setComplete} = this.props;\n\n    if (!Array.isArray(inputsSignatures)) {\n      errback(\"Signature is not an array of strings.\");\n      return;\n    }\n\n    if (inputsSignatures.length < inputs.length) {\n      errback(\"Not enough signatures (must be exactly one for each input).\");\n      return;\n    }\n    if (inputsSignatures.length > inputs.length) {\n      errback(\"Too many signatures (must be exactly one for each input).\");\n      return;\n    }\n\n    const publicKeys = [];\n    const finalizedSignatureImporters = Object.values(signatureImporters).filter((signatureImporter) => (signatureImporter.finalized));\n    for (let inputIndex = 0; inputIndex < inputsSignatures.length; inputIndex += 1) {\n      const input = inputs[inputIndex];\n      const inputNumber = inputIndex + 1;\n      const inputSignature = inputsSignatures[inputIndex];\n      if (validateHex(inputSignature) !== '') {\n        errback(`Signature for input ${inputNumber} is not valid hex.`);\n        return;\n      }\n\n      let publicKey;\n      try{\n        publicKey = validateMultisigSignature(unsignedTransaction, inputIndex, input, inputSignature);\n      } catch(e) {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n      if (publicKey) {\n        for (let finalizedSignatureImporterNum=0; finalizedSignatureImporterNum < finalizedSignatureImporters.length; finalizedSignatureImporterNum++) {\n          const finalizedSignatureImporter = finalizedSignatureImporters[finalizedSignatureImporterNum];\n\n          if (finalizedSignatureImporter.signature[inputIndex] === inputSignature || finalizedSignatureImporter.publicKeys[inputIndex] === publicKey) {\n            errback(`Signature for input ${inputNumber} is a duplicate of a previously provided signature.`);\n            return;\n          }\n        }\n        publicKeys.push(publicKey);\n      } else {\n        errback(`Signature for input ${inputNumber} is invalid.`);\n        return;\n      }\n    }\n\n    setComplete(number, {signature: inputsSignatures, publicKeys: publicKeys, finalized: true});\n  }\n\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {\n    ...{\n      signatureImporters: state.spend.signatureImporters,\n      signatureImporter: state.spend.signatureImporters[ownProps.number],\n      fee: state.spend.transaction.fee,\n      txid: state.spend.transaction.txid,\n    },\n    ...state.spend.transaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setName: setSignatureImporterName,\n  setMethod: setSignatureImporterMethod,\n  setBIP32Path: setSignatureImporterBIP32Path,\n  setPublicKeys: setSignatureImporterPublicKeys,\n  setSignature: setSignatureImporterSignature,\n  setFinalized: setSignatureImporterFinalized,\n  setComplete: setSignatureImporterComplete,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignatureImporter);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  signedMultisigTransaction,\n  blockExplorerTransactionURL,\n} from \"unchained-bitcoin\";\nimport { broadcastTransaction } from '../../blockchain';\n\nimport {\n  Typography,\n  Box,\n  FormHelperText,\n  Button,\n  Card,\n  CardHeader,\n  CardContent,\n} from '@material-ui/core';\nimport {OpenInNew} from \"@material-ui/icons\";\nimport Copyable from \"../Copyable\";\nimport {externalLink} from \"../../utils\";\nimport {setTXID} from '../../actions/transactionActions';\n\nclass Transaction extends React.Component {\n\n  static propTypes = {\n    network: PropTypes.string.isRequired,\n    client: PropTypes.object.isRequired,\n    inputs: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  state = {\n    error: '',\n    broadcasting: false,\n    txid: '',\n  }\n\n  render() {\n    const { error, broadcasting, txid } = this.state;\n    const signedTransaction = this.buildSignedTransaction();\n    const signedTransactionHex = signedTransaction.toHex();\n    return (\n      <Card>\n        <CardHeader title=\"Broadcast\"/>\n        <CardContent>\n\n          <form>\n            {signedTransaction &&\n             <Box mt={4}>\n               <Typography variant=\"h6\">Signed Transaction</Typography>\n               <Copyable text={signedTransactionHex}>\n                 <small><code>{signedTransactionHex}</code></small>\n               </Copyable>\n             </Box>}\n\n            {\n              txid === ''\n                ?\n                <Box mt={2}>\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={!signedTransaction || broadcasting}\n                    onClick={this.handleBroadcast}\n                  >\n                    Broadcast Transaction\n                  </Button>\n                  <FormHelperText error>{error}</FormHelperText>\n                  <small><FormHelperText>Warning: Broadcasting this transaction cannot be undone.</FormHelperText></small>\n                </Box>\n              :\n              <Box mt={2}>\n                <Typography variant=\"h5\">\n                  <Copyable text={txid}>\n                    <code>{txid}</code>\n                  </Copyable>\n                  &nbsp;\n                  {externalLink(this.transactionURL(), <OpenInNew />)}\n                </Typography>\n                <p>Transaction successfully broadcast.</p>\n              </Box>\n            }\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  buildSignedTransaction = () => {\n    const {unsignedTransaction, inputs, signatureImporters} = this.props;\n    const inputsSignaturesByPublicKey = [];\n    inputs.forEach((input, inputIndex) => {\n      const inputSignaturesByPublicKey = {};\n      Object.values(signatureImporters).forEach((signatureImporter) => {\n        const signerInputPublicKey = signatureImporter.publicKeys[inputIndex];\n        const signerInputSignature = signatureImporter.signature[inputIndex];\n        inputSignaturesByPublicKey[signerInputPublicKey] = signerInputSignature;\n      });\n      inputsSignaturesByPublicKey.push(inputSignaturesByPublicKey);\n    });\n    return signedMultisigTransaction(unsignedTransaction, inputs, inputsSignaturesByPublicKey);\n  }\n\n  handleBroadcast = async () => {\n    const {client, network, setTxid} = this.props;\n    const signedTransaction = this.buildSignedTransaction();\n    let error = '';\n    let txid = '';\n    this.setState({broadcasting: true});\n    try {\n      txid = await broadcastTransaction(signedTransaction.toHex(), network, client);\n    } catch (e) {\n      console.error(e);\n      error = `There was an error broadcasting the transaction.: ${e}`;\n    } finally {\n      this.setState({txid, error, broadcasting: false});\n      setTxid(txid);\n    }\n  }\n\n  transactionURL = () => {\n    const {network} = this.props;\n    const {txid} = this.state;\n    return blockExplorerTransactionURL(txid, network);\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    network: state.settings.network,\n    client: state.client,\n    ...state.client,\n    signatureImporters: state.spend.signatureImporters,\n    inputs: state.spend.transaction.inputs,\n    unsignedTransaction: state.spend.transaction.unsignedTransaction,\n  };\n}\n\nconst mapDispatchToProps = {\n  setTxid: setTXID\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transaction);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  validatePublicKey,\n  validateBIP32Path,\n} from 'unchained-bitcoin';\nimport {\n  TREZOR,\n  LEDGER,\n  HERMIT,\n} from \"unchained-wallets\";\n\n// Components\nimport CheckIcon from '@material-ui/icons/Check';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { styled } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Select,\n  MenuItem,\n  InputLabel,\n  FormControl,\n  Button,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from '@material-ui/core';\nimport HardwareWalletPublicKeyImporter from \"../CreateAddress/HardwareWalletPublicKeyImporter\";\nimport HermitPublicKeyImporter from \"../CreateAddress/HermitPublicKeyImporter\";\n\n// Actions\nimport {\n  resetPublicKeyImporter,\n  resetPublicKeyImporterBIP32Path,\n  setPublicKeyImporterBIP32Path,\n  setPublicKeyImporterMethod,\n  setPublicKeyImporterPublicKey,\n} from \"../../actions/ownershipActions\";\n\nimport 'react-table/react-table.css';\n\nclass ConfirmOwnership extends React.Component {\n\n  titleRef = React.createRef();\n\n  static propTypes = {\n    publicKeyImporter: PropTypes.shape({}).isRequired,\n    addressType: PropTypes.string.isRequired,\n    network: PropTypes.string.isRequired,\n    publicKeys: PropTypes.array.isRequired,\n    address: PropTypes.string.isRequired,\n    setMethod: PropTypes.func.isRequired,\n    setPublicKey: PropTypes.func.isRequired,\n    setBIP32Path: PropTypes.func.isRequired,\n    resetBIP32Path: PropTypes.func.isRequired,\n    reset: PropTypes.func.isRequired,\n  };\n\n  state = {\n    disableChangeMethod: false,\n  };\n\n  componentDidMount = () => {\n    this.resetBIP32Path();\n    this.scrollToTitle();\n  }\n\n  componentDidUpdate = () => {\n    this.scrollToTitle();\n  }\n\n  scrollToTitle = () => {\n    this.titleRef.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  render() {\n    const { publicKeyImporter } = this.props;\n    const { disableChangeMethod } = this.state;\n    const labelId = \"public-key-importer-select-label\";\n    return (\n      <Card>\n        <CardHeader ref={this.titleRef} title=\"Confirm Ownership\" />\n        <CardContent>\n          <form>\n            <p>\n              How will you confirm your ownership of this address?\n            </p>\n\n            <FormControl\n              fullWidth={true}>\n              <InputLabel id={labelId}>Select Method</InputLabel>\n\n              <Select\n                labelId\n                id=\"public-key-importer-select\"\n                disabled={disableChangeMethod}\n                value={publicKeyImporter.method}\n                onChange={this.handleMethodChange}\n              >\n                <MenuItem value=\"\">{'< Select method >' }</MenuItem>\n                <MenuItem value={TREZOR}>Trezor</MenuItem>\n                <MenuItem value={LEDGER}>Ledger</MenuItem>\n                <MenuItem value={HERMIT}>Hermit</MenuItem>\n              </Select>\n\n            </FormControl>\n\n            {this.renderImportByMethod()}\n\n            {this.renderConfirmation()}\n\n            {publicKeyImporter.method !== '' &&\n             <Button variant=\"contained\" size=\"small\" color=\"secondary\" role=\"button\" onClick={this.reset}>Start Again</Button>}\n\n          </form>\n\n        </CardContent>\n\n      </Card>\n    );\n  }\n\n  renderImportByMethod = () => {\n    const {network, publicKeyImporter, defaultBIP32Path} = this.props;\n    if (publicKeyImporter.method === HERMIT) {\n      return <HermitPublicKeyImporter\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               resetBIP32Path={this.resetBIP32Path}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod}\n               reset={this.reset} />;\n    }\n    if (publicKeyImporter.method === TREZOR || publicKeyImporter.method === LEDGER) {\n      return <HardwareWalletPublicKeyImporter\n               network={network}\n               publicKeyImporter={publicKeyImporter}\n               validateAndSetBIP32Path={this.validateAndSetBIP32Path}\n               resetBIP32Path={this.resetBIP32Path}\n               defaultBIP32Path={defaultBIP32Path}\n               validateAndSetPublicKey={this.validateAndSetPublicKey}\n               enableChangeMethod={this.enableChangeMethod}\n               disableChangeMethod={this.disableChangeMethod} />;\n    }\n    return null;\n  }\n\n  //\n  // Method\n  //\n\n  handleMethodChange = (event) => {\n    const { setMethod } = this.props;\n    setMethod(event.target.value);\n    this.reset();\n  }\n\n  disableChangeMethod = () => {\n    this.setState({disableChangeMethod: true});\n  }\n\n  enableChangeMethod = () => {\n    this.setState({disableChangeMethod: false});\n  }\n\n  //\n  // State\n  //\n\n  reset = () => {\n    const { reset } = this.props;\n    reset();\n  }\n\n  //\n  // BIP32 Path\n  //\n\n  resetBIP32Path = () => {\n    const {resetBIP32Path} = this.props;\n    resetBIP32Path();\n  }\n\n  validateAndSetBIP32Path = (bip32Path, callback, errback, options) => {\n    const {setBIP32Path} = this.props;\n    const error = validateBIP32Path(bip32Path, options);\n    setBIP32Path(bip32Path);\n    if (error) {\n      errback(error);\n    } else {\n      errback('');\n      callback();\n    }\n  }\n\n\n  //\n  // Public Keey & Confirmation\n  //\n\n  validateAndSetPublicKey = (publicKey, errback, callback) => {\n    const {setPublicKey} = this.props;\n    const error = validatePublicKey(publicKey);\n    setPublicKey(publicKey);\n    if (error) {\n      errback && errback(error);\n    } else {\n      errback && errback('');\n      callback && callback();\n    }\n  }\n\n  renderConfirmation = () => {\n    const { publicKeys, publicKeyImporter } = this.props;\n    if (publicKeyImporter.publicKey === '') {return null;}\n    if (publicKeys.includes(publicKeyImporter.publicKey)) {\n      const GreenListItemIcon = styled(ListItemIcon)({color: 'green'});\n      return (\n      <List>\n       <ListItem>\n        <GreenListItemIcon>\n          <CheckIcon/>\n        </GreenListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    } else {\n     return (\n      <List>\n       <ListItem>\n        <ListItemIcon>\n          <Typography color=\"error\">\n            <ClearIcon/>\n          </Typography>\n        </ListItemIcon>\n        <ListItemText>\n        The public key exported at BIP32 path <code>{publicKeyImporter.bip32Path}</code> is not present in the provided redeem script.\n        </ListItemText>\n      </ListItem>\n     </List>);\n    }\n  }\n\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return state.spend.ownership;\n}\n\nconst mapDispatchToProps = {\n  setMethod: setPublicKeyImporterMethod,\n  setBIP32Path: setPublicKeyImporterBIP32Path,\n  setPublicKey: setPublicKeyImporterPublicKey,\n  resetBIP32Path: resetPublicKeyImporterBIP32Path,\n  reset: resetPublicKeyImporter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmOwnership);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\n// Components\nimport NetworkPicker from '../NetworkPicker';\nimport ClientPicker from '../ClientPicker';\nimport AddressTypePicker from '../AddressTypePicker';\nimport ScriptEntry from './ScriptEntry';\nimport UTXOSet from './UTXOSet';\nimport OutputsForm from './OutputsForm';\nimport SignatureImporter from './SignatureImporter';\nimport Transaction from './Transaction';\nimport {Grid, Box} from \"@material-ui/core\";\nimport ConfirmOwnership from './ConfirmOwnership';\nimport '../styles.css';\n\nclass Spend extends React.Component {\n\n  static propTypes = {\n    transaction: PropTypes.object.isRequired,\n    ownership: PropTypes.object.isRequired,\n    signatureImporters: PropTypes.object.isRequired,\n  };\n\n  render = () => {\n    return (\n      <Box mt={2}>\n        <Grid container spacing={3}>\n          <Grid item md={8}>\n            <Box><ScriptEntry /></Box>\n            {this.renderBody()}\n          </Grid>\n          <Grid item md={4}>\n            <Box><AddressTypePicker /></Box>\n            <Box mt={2}><NetworkPicker /></Box>\n            <Box mt={2}><ClientPicker /></Box>\n          </Grid>\n        </Grid>\n      </Box>\n    );\n  };\n\n  renderBody = () => {\n    const {transaction, ownership} = this.props;\n    if (ownership.chosen) {\n      return <Box mt={2}><ConfirmOwnership /></Box>;\n    } else return (\n      <Box>\n      {\n        this.spendable() &&\n        <Box>\n          <Box mt={2}><UTXOSet/></Box>\n          <Box mt={2}><OutputsForm/></Box>\n        </Box>\n      }\n\n      {\n        transaction.finalizedOutputs &&\n        <Box>\n          {this.renderSignatureImporters()}\n        </Box>\n\n      }\n\n      {\n        this.signaturesFinalized() &&\n        <Box mt={2}>\n          <Transaction/>\n        </Box>\n      }\n      </Box>\n\n    )\n  }\n\n  renderSignatureImporters = () => {\n    const {transaction} = this.props;\n    const signatureImporters = [];\n    for (var signatureImporterNum = 1; signatureImporterNum <= transaction.requiredSigners; signatureImporterNum++) {\n      signatureImporters.push(\n        <Box key={signatureImporterNum} mt={2}>\n          <SignatureImporter number={signatureImporterNum} />\n        </Box>\n      );\n    }\n    return signatureImporters;\n  }\n\n  spendable = () => {\n    const {transaction} = this.props;\n    return transaction.inputs.length > 0;\n  }\n\n  signaturesFinalized = () => {\n    const {signatureImporters} = this.props;\n    return Object.values(signatureImporters).length > 0 && Object.values(signatureImporters).every((signatureImporter) => signatureImporter.finalized);\n  }\n\n  confirmOwnership = (value) => {\n    this.setState({addressFinalized: true, confirmOwnership: value});\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return state.spend;\n}\n\nexport default connect(mapStateToProps)(Spend);\n","import React from 'react';\nimport { AppBar, Toolbar, Button,  makeStyles, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nconst Navbar = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n              Caravan\n          </Typography>\n          \n          <Button color=\"inherit\" href=\"#/address\" target=\"_blank\">Create</Button>\n\n          <Button color=\"inherit\" href=\"#/spend\" target=\"_blank\">Interact</Button>\n          \n          <Button color=\"inherit\" href=\"#/\" target=\"_blank\">Help</Button>\n\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n  \n}\n\nexport default Navbar;\n","import React from 'react';\nimport {externalLink} from \"../utils\";\nimport {version} from \"../../package.json\";\n\n// Components\nimport { Grid, Box } from '@material-ui/core';\n\n// Assets\nconst logo = require('../images/logo.png');\n\nconst Footer = () => (\n  <Box mt={2}>\n    <hr />\n    <Grid container alignItems=\"center\">\n\n      <Grid item sm={2}>\n        {externalLink(\n          'https://www.unchained-capital.com',\n          <img\n            src={logo}\n            className=\"logo\"\n            alt=\"Unchained Capital logo\"\n            height=\"32\" />\n        )}\n      </Grid>\n\n      <Grid item  sm={6}>\n        <p>Copyright 2019 by Unchained Capital and released under an MIT license.</p>\n      </Grid>\n\n      <Grid item sm={1}>\n        <p> v{version} </p>\n      </Grid>\n    </Grid>\n\n  </Box>\n\n\n);\n\nexport default Footer;\n","import {Box, Typography} from '@material-ui/core';\nimport React from 'react';\n\nconst reportingURL = 'https://github.com/unchained-capital/caravan/issues'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      errorInfo: errorInfo,\n      error: error\n    })\n  }\n\n  render() {\n    const {error, errorInfo} = this.state;\n    if (errorInfo) {\n      return (\n        <Box m={4}>\n          <Box m={2}>\n            <Typography variant={'h3'} component={'h1'}>Something went wrong.</Typography>\n          </Box>\n          <Box m={2}>\n            <Typography variant={'body1'}>\n              Let us know what happened on <a href={reportingURL} target={'_blank'}>github</a>.\n            </Typography>\n          </Box>\n          <Box mx={2} my={3}>\n            <details style={{ whiteSpace: 'pre-wrap' }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Box>\n        </Box>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport {ErrorBoundary}\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\n// Components\nimport Help from './Help';\nimport CreateAddress from './CreateAddress';\nimport Spend from './Spend';\nimport Navbar from './Navbar';\nimport Footer from \"./Footer\";\nimport { CssBaseline, Container } from '@material-ui/core';\nimport {ErrorBoundary} from './ErrorBoundry';\n\n\nconst App = () => (\n  <div className=\"App\">\n    <CssBaseline />\n    <Container maxWidth=\"lg\">\n      <Navbar />\n      <ErrorBoundary>\n        <Router>\n          <Switch>\n            <Route path=\"/address\" component={CreateAddress} />\n            <Route path=\"/spend\" component={Spend} />\n            <Route path=\"/\" component={Help} />\n          </Switch>\n        </Router>\n      </ErrorBoundary>\n      <Footer />\n    </Container>\n  </div>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export function updateState(state, change) {\n    return {\n\t    ...state,\n\t    ...change,\n    };\n}\n","import {\n  MAINNET, \n  P2SH,\n} from \"unchained-bitcoin\";\n\nimport { updateState } from './utils';\nimport {\n  SET_NETWORK,\n  SET_TOTAL_SIGNERS,\n  SET_REQUIRED_SIGNERS,\n  SET_ADDRESS_TYPE,\n  SET_FROZEN,\n} from '../actions/settingsActions';\n\nconst initialState = {\n  network: MAINNET,\n  totalSigners: 3,\n  requiredSigners: 2,\n  addressType: P2SH,\n  frozen: false,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NETWORK:\n      return updateState(state, { network: action.value });\n    case SET_TOTAL_SIGNERS:\n      return updateState(state, { totalSigners: action.value });\n    case SET_REQUIRED_SIGNERS:\n      return updateState(state, { requiredSigners: action.value });\n    case SET_ADDRESS_TYPE:\n      return updateState(state, { addressType: action.value });\n    case SET_FROZEN:\n      return updateState(state, { frozen: action.value });\n    default:\n      return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  SET_CLIENT_TYPE,\n  SET_CLIENT_URL,\n  SET_CLIENT_USERNAME,\n  SET_CLIENT_PASSWORD,\n\n  SET_CLIENT_URL_ERROR,\n  SET_CLIENT_USERNAME_ERROR,\n  SET_CLIENT_PASSWORD_ERROR,\n\n  SET_CLIENT_STATUS,\n} from '../actions/clientActions';\n\nconst initialState = {\n  type: 'public',\n  url: '',\n  username: '',\n  password: '',\n  url_error: '',\n  username_error: '',\n  password_error: '',\n  status: 'unknown',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_CLIENT_TYPE:\n      return updateState(state, { type: action.value });\n    case SET_CLIENT_URL:\n      return updateState(state, { url: action.value });\n    case SET_CLIENT_USERNAME:\n      return updateState(state, { username: action.value });\n    case SET_CLIENT_PASSWORD:\n      return updateState(state, { password: action.value });\n    case SET_CLIENT_URL_ERROR:\n      return updateState(state, { url_error: action.value });\n    case SET_CLIENT_USERNAME_ERROR:\n      return updateState(state, { username_error: action.value });\n    case SET_CLIENT_PASSWORD_ERROR:\n      return updateState(state, { password_error: action.value });\n\n    case SET_CLIENT_STATUS:\n      return updateState(state, { status: action.value });\n\n    default:\n      return state;\n  }\n};\n","import BigNumber from \"bignumber.js\";\n\nconst initialNodeState = {\n  present: true,\n  bip32Path: '',\n  publicKeys: [],\n  multisig: {},\n  address: '',\n  balanceSats: new BigNumber(0),\n  utxos: [],\n  change: false,\n  spend: false,\n  fetchedUTXOs: false,\n  fetchUTXOsError: '',\n};\n\nconst initialState = {\n  nodes: {},\n  trailingEmptyNodes: 0,\n  fetchUTXOsErrors: 0,\n  balanceSats: new BigNumber(0),\n};\n\nfunction updateNode(state, action) {\n  const node = {\n    ...initialNodeState,\n    ...(state.nodes[action.value.bip32Path] || {}),\n    ...action.value,\n  };\n  const newNodes = {};\n  newNodes[node.bip32Path] = node;\n\n  const updatedState = {\n    ...state,\n    ...{\n      nodes: {\n        ...state.nodes,\n        ...newNodes,\n      },\n      balanceSats: state.balanceSats.plus(node.balanceSats),\n    },\n  };\n\n  let trailingEmptyNodes = 0;\n  let fetchUTXOsErrors = 0;\n  const allBIP32Paths = Object.keys(updatedState.nodes);\n  allBIP32Paths.sort((p1, p2) => {\n    const p1Segments = (p1 || '').split('/');\n    const p2Segments = (p2 || '').split('/');\n    const p1Index = parseInt(p1Segments[2]);\n    const p2Index = parseInt(p2Segments[2]);\n    return p1Index - p2Index;\n  });\n  for (let i=0; i < allBIP32Paths.length; i++) {\n    const bip32Path = allBIP32Paths[allBIP32Paths.length - (i + 1)];\n    const otherNode = updatedState.nodes[bip32Path];\n    if (otherNode.fetchedUTXOs) {\n      if (node.balanceSats.isEqualTo(0)) {\n        trailingEmptyNodes++;\n      };\n    }\n    if (otherNode.fetchUTXOsError !== '') {\n      fetchUTXOsErrors++;\n    }\n  }\n  updatedState.trailingEmptyNodes = trailingEmptyNodes;\n  updatedState.fetchUTXOsErrors = fetchUTXOsErrors;\n  return updatedState;\n}\n\nexport default (actionType) => (state = initialState, action) => {\n  switch (action.type) {\n  case actionType:\n    return updateNode(state, action);\n  default:\n    return state;\n  }\n};\n","import { wrappedNumberedActions } from \"./utils\";\n\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME        = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME\";\nexport const RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY  = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY\";\nexport const SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED   = \"SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED\";\n\nexport const {\n  setExtendedPublicKeyImporterName,\n  setExtendedPublicKeyImporterBIP32Path,\n  resetExtendedPublicKeyImporterBIP32Path,\n  setExtendedPublicKeyImporterMethod,\n  setExtendedPublicKeyImporterExtendedPublicKey,\n  setExtendedPublicKeyImporterFinalized,\n} = wrappedNumberedActions({\n  setExtendedPublicKeyImporterName: SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  resetExtendedPublicKeyImporterBIP32Path: RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterBIP32Path: SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  setExtendedPublicKeyImporterMethod: SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  setExtendedPublicKeyImporterExtendedPublicKey: SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  setExtendedPublicKeyImporterFinalized: SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n});\n","import {\n  MAINNET,\n  P2SH,\n  multisigBIP32Root,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY,\n  SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED,\n} from '../actions/extendedPublicKeyImporterActions';\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const extendedPublicKeys = Object.values(state.extendedPublicKeyImporters).map((extendedPublicKeyImporter) => (extendedPublicKeyImporter.extendedPublicKey)).join('');\n  return `${timestamp}-${extendedPublicKeys}`;\n}\n\nconst initialExtendedPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Root(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  extendedPublicKey: '',\n  finalized: false,\n};\n\nconst initialState = {\n  extendedPublicKeyImporters: {\n    1: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 1\"}  },\n    2: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 2\"}  },\n    3: { ...initialExtendedPublicKeyImporterState, ...{name: \"Extended Public Key 3\"}  },\n  },\n  defaultBIP32Path: multisigBIP32Root(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n};\n\nfunction updateExtendedPublicKeyImporterState(state, action, field) {\n  const extendedPublicKeyImporterChange = {};\n  extendedPublicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n    ...{nodes: {}},\n  };\n  newState.extendedPublicKeyImporters[action.number] = updateState(state.extendedPublicKeyImporters[action.number], extendedPublicKeyImporterChange);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const extendedPublicKeyImporters = {};\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= totalSigners; extendedPublicKeyImporterNum++) {\n    extendedPublicKeyImporters[extendedPublicKeyImporterNum] = state.extendedPublicKeyImporters[extendedPublicKeyImporterNum] || {\n      ...initialExtendedPublicKeyImporterState,\n      ...{\n        name: `Extended Public key ${extendedPublicKeyImporterNum}`,\n      },\n    };\n  }\n\n  return {\n    ...state,\n    ...{extendedPublicKeyImporters},\n  };\n}\n\nfunction updateNetwork(state, action) {\n  const addressType = state.addressType;\n  const network = action.value;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= Object.values(state.extendedPublicKeyImporters).length; extendedPublicKeyImporterNum++) {\n    const extendedPublicKeyImporter = newState.extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n    if (! extendedPublicKeyImporter.bip32PathModified) {\n      extendedPublicKeyImporter.bip32Path = bip32Path;\n    }\n  }\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const addressType = action.value;\n  const network = state.network;\n  const bip32Path = multisigBIP32Root(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  for (let extendedPublicKeyImporterNum = 1; extendedPublicKeyImporterNum <= Object.values(state.extendedPublicKeyImporters).length; extendedPublicKeyImporterNum++) {\n    const extendedPublicKeyImporter = newState.extendedPublicKeyImporters[extendedPublicKeyImporterNum];\n    if (! extendedPublicKeyImporter.bip32PathModified) {\n      extendedPublicKeyImporter.bip32Path = bip32Path;\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_NAME:\n    return updateExtendedPublicKeyImporterState(state, action, 'name');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case RESET_EXTENDED_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updateExtendedPublicKeyImporterState(\n      updateExtendedPublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_METHOD:\n    return updateExtendedPublicKeyImporterState(state, action, 'method');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_EXTENDED_PUBLIC_KEY:\n    return updateExtendedPublicKeyImporterState(state, action, 'extendedPublicKey');\n  case SET_EXTENDED_PUBLIC_KEY_IMPORTER_FINALIZED:\n    return updateExtendedPublicKeyImporterState(state, action, 'finalized');\n  default:\n    return state;\n  }\n};\n","import {\n  MAINNET, \n  P2SH,\n  multisigBIP32Path,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport {\n  SET_TOTAL_SIGNERS,\n} from \"../actions/settingsActions\";\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from '../actions/settingsActions';\nimport {\n  SET_PUBLIC_KEY_IMPORTER_NAME,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n  SET_PUBLIC_KEY_IMPORTER_FINALIZED,\n  MOVE_PUBLIC_KEY_IMPORTER_UP,\n  MOVE_PUBLIC_KEY_IMPORTER_DOWN,\n  SORT_PUBLIC_KEY_IMPORTERS,\n} from '../actions/publicKeyImporterActions';\n\nconst TEXT = \"text\";\n\nfunction fingerprint(state) {\n  const timestamp = new Date().getTime().toString();\n  const publicKeys = Object.values(state.publicKeyImporters).map((publicKeyImporter) => (publicKeyImporter.publicKey)).join('');\n  return `${timestamp}-${publicKeys}`;\n}\n\nconst initialPublicKeyImporterState = {\n  name: '',\n  bip32Path: multisigBIP32Path(P2SH, MAINNET),\n  bip32PathModified: false,\n  method: '',\n  publicKey: '',\n  finalized: false,\n  conflict: false,\n};\n\nconst initialState = {\n  publicKeyImporters: {\n    1: { ...initialPublicKeyImporterState, ...{name: \"Public Key 1\"} },\n    2: { ...initialPublicKeyImporterState, ...{name: \"Public Key 2\"} },\n    3: { ...initialPublicKeyImporterState, ...{name: \"Public Key 3\"} },\n  },\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n  network: MAINNET,\n  addressType: P2SH,\n  fingerprint: '',\n  finalizedNetwork: '',\n  finalizedAddressType: '',\n};\n\nfunction movePublicKeyImporterUp(state, action) {\n  if (action.number === 1) { return state; }\n  const newState = {\n    ...state,\n  };\n  const abovePublicKeyImporter = state.publicKeyImporters[action.number-1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number - 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = abovePublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\n\nfunction movePublicKeyImporterDown(state, action) {\n  if (action.number === Object.values(state.publicKeyImporters).length) { return state; }\n  const newState = {\n    ...state,\n   };\n  const belowPublicKeyImporter = state.publicKeyImporters[action.number+1];\n  const publicKeyImporter = state.publicKeyImporters[action.number];\n  newState.publicKeyImporters[action.number + 1] = publicKeyImporter;\n  newState.publicKeyImporters[action.number] = belowPublicKeyImporter;\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction sortPublicKeyImporters(state, action) {\n  const publicKeyImporters = Object.values(state.publicKeyImporters);\n  const sortedPublicKeys = publicKeyImporters.map((publicKeyImporter) => publicKeyImporter.publicKey).sort();\n  const sortedPublicKeyImporters = sortedPublicKeys.map((publicKey) => {\n    return publicKeyImporters.find((publicKeyImporter) => publicKeyImporter.publicKey === publicKey);\n  });\n  const publicKeyImportersChange = {};\n  for (var publicKeyImporterNum=1; publicKeyImporterNum <= sortedPublicKeyImporters.length; publicKeyImporterNum++) {\n    publicKeyImportersChange[publicKeyImporterNum] = sortedPublicKeyImporters[publicKeyImporterNum - 1];\n  }\n\n  const newState = {\n    ...state,\n    ...{publicKeyImporters: publicKeyImportersChange},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState.publicKeyImporters[action.number] = updateState(state.publicKeyImporters[action.number], publicKeyImporterChange);\n  setConflict(newState.publicKeyImporters[action.number] ,state);\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction updateTotalSigners(state, action) {\n  const totalSigners = action.value;\n  const publicKeyImporters = {};\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= totalSigners; publicKeyImporterNum++) {\n    publicKeyImporters[publicKeyImporterNum] = state.publicKeyImporters[publicKeyImporterNum] || {\n      ...initialPublicKeyImporterState, \n      ...{\n        name: `Public Key ${publicKeyImporterNum}`,\n      },\n    };\n  }\n  const newState = {\n    ...state,\n    ...{publicKeyImporters, stub: action.type},\n  };\n  return updateState(newState, {fingerprint: fingerprint(newState)});\n}\n\nfunction setConflict(publicKeyImporter ,state) {\n  if (state.finalizedNetwork) {\n    publicKeyImporter.conflict = state.finalizedNetwork !== state.network || state.finalizedAddressType !== state.addressType;\n  }\n}\n\nfunction updateImporterPaths(state, newState, bip32Path) {\n  for (let publicKeyImporterNum = 1; publicKeyImporterNum <= Object.values(state.publicKeyImporters).length; publicKeyImporterNum++) {\n    const publicKeyImporter = newState.publicKeyImporters[publicKeyImporterNum];\n    if (!publicKeyImporter.bip32PathModified) {\n      if (!publicKeyImporter.finalized) publicKeyImporter.bip32Path = bip32Path;\n    }\n    setConflict(publicKeyImporter, newState);\n  }\n}\n\nfunction updateNetwork(state, action) {\n  const network = action.value;\n  const addressType = state.addressType;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{network, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateAddressType(state, action) {\n  const network = state.network;\n  const addressType = action.value;\n  const bip32Path = multisigBIP32Path(addressType, network);\n  const newState = {...state, ...{addressType, defaultBIP32Path: bip32Path}};\n  updateImporterPaths(state, newState, bip32Path);\n  return newState;\n}\n\nfunction updateFinalizedSettings(state, action) {\n  const newState = {...state}\n  if (action.value === true && state.finalizedNetwork === '' && newState.publicKeyImporters[action.number].method !== TEXT) {\n    newState.finalizedNetwork = state.network;\n    newState.finalizedAddressType = state.addressType;\n  } else if (action.value === false && state.finalizedNetwork !== '') {\n    const finalizedCount = Object.values(state.publicKeyImporters).reduce((count, importer) => {\n      if (importer.finalized === true && importer.method !== TEXT) return count+1; else return count\n    }, 0);\n    if (finalizedCount === 1) { // last one to be removed\n      newState.finalizedNetwork = '';\n      newState.finalizedAddressType = '';\n      Object.values(newState.publicKeyImporters).forEach(importer => importer.conflict = false);\n    }\n  }\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case SET_NETWORK:\n    return updateNetwork(state, action);\n  case SET_ADDRESS_TYPE:\n    return updateAddressType(state, action);\n  case SET_TOTAL_SIGNERS:\n    return updateTotalSigners(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_NAME:\n    return updatePublicKeyImporterState(state, action, 'name');\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, {number: action.number, value: state.defaultBIP32Path}, 'bip32Path'),\n      {number: action.number, value: false},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(\n      updatePublicKeyImporterState(state, action, 'bip32Path'),\n      {number: action.number, value: true},\n      \"bip32PathModified\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, 'method');\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, 'publicKey');\n  case SET_PUBLIC_KEY_IMPORTER_FINALIZED:\n      return updatePublicKeyImporterState(updateFinalizedSettings(state, action), action, 'finalized');\n  case MOVE_PUBLIC_KEY_IMPORTER_UP:\n    return movePublicKeyImporterUp(state, action);\n  case MOVE_PUBLIC_KEY_IMPORTER_DOWN:\n    return movePublicKeyImporterDown(state, action);\n  case SORT_PUBLIC_KEY_IMPORTERS:\n    return sortPublicKeyImporters(state, action);\n  default:\n    return state;\n  }\n};\n","import {\n  P2SH,\n  MAINNET,\n  multisigAddressType,\n  multisigBIP32Path,\n  multisigPublicKeys,\n} from \"unchained-bitcoin\";\nimport { updateState } from './utils';\nimport { \n  SET_NETWORK,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_CONFIRM_OWNERSHIP,\n  SET_OWNERSHIP_MULTISIG,\n  RESET_PUBLIC_KEY_IMPORTER,\n  RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_BIP32_PATH,\n  SET_PUBLIC_KEY_IMPORTER_METHOD,\n  SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY,\n} from '../actions/ownershipActions';\n\nconst initialPublicKeyImporterState = {\n  bip32Path: '',\n  method: '',\n  publicKey: '',\n};\n\nconst initialState = {\n  chosen: false,\n  publicKeyImporter: {...initialPublicKeyImporterState},\n  network: MAINNET,\n  addressType: P2SH,\n  publicKeys: [],\n  address: '',\n  defaultBIP32Path: multisigBIP32Path(P2SH, MAINNET),\n};\n\nfunction updatePublicKeyImporterState(state, action, field) {\n  const publicKeyImporterChange = {};\n  publicKeyImporterChange[field] = action.value;\n  return {\n    ...state,\n    ...{\n      publicKeyImporter: {\n        ...state.publicKeyImporter,\n        ...publicKeyImporterChange,\n      }\n    }\n  };\n}\n\nfunction updateMultisig(state, action) {\n  const multisig = action.value;\n  const addressType = multisigAddressType(multisig);\n  const defaultBIP32Path = multisigBIP32Path(addressType, state.network);\n  return {\n    ...state,\n    ...{\n      network: state.network,\n      addressType,\n      publicKeys: multisigPublicKeys(multisig),\n      address: multisig.address,\n      defaultBIP32Path,\n    },\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_CONFIRM_OWNERSHIP:\n    return updateState(state, {chosen: true});\n  case SET_NETWORK:\n    return updateState(state, {network: action.value});\n  case SET_OWNERSHIP_MULTISIG:\n    return updateMultisig(state, action);\n  case SET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    const keyResetState = updatePublicKeyImporterState(state, {value: ''}, \"publicKey\");\n    return updatePublicKeyImporterState(keyResetState, action, \"bip32Path\");\n  case SET_PUBLIC_KEY_IMPORTER_METHOD:\n    return updatePublicKeyImporterState(state, action, \"method\");\n  case SET_PUBLIC_KEY_IMPORTER_PUBLIC_KEY:\n    return updatePublicKeyImporterState(state, action, \"publicKey\");\n  case RESET_PUBLIC_KEY_IMPORTER_BIP32_PATH:\n    return updatePublicKeyImporterState(state, {value: state.defaultBIP32Path}, \"bip32Path\");\n  case RESET_PUBLIC_KEY_IMPORTER:\n    return {\n      ...state,\n      ...{\n        publicKeyImporter: {\n          ...state.publicKeyImporter,\n          ...{bip32Path: state.defaultBIP32Path, publicKey: ''}\n        }\n      }\n    };\n  default:\n    return state;\n  }\n};\n","import { updateState } from './utils';\nimport {\n  RESET_SIGNATURES,\n  \n  SET_SIGNATURE_IMPORTER_NAME,\n  SET_SIGNATURE_IMPORTER_METHOD,\n  SET_SIGNATURE_IMPORTER_BIP32_PATH,\n  SET_SIGNATURE_IMPORTER_SIGNATURE,\n  SET_SIGNATURE_IMPORTER_PUBLIC_KEYS,\n  SET_SIGNATURE_IMPORTER_FINALIZED,\n  SET_SIGNATURE_IMPORTER_COMPLETE,\n} from '../actions/signatureImporterActions';\nimport {\n  SET_REQUIRED_SIGNERS,\n} from \"../actions/transactionActions\";\n\nconst initialSignatureImporterState = {\n  name: '',\n  method: '',\n  publicKeys: [],\n  signature: [],\n  bip32Path: '',\n  finalized: false,\n};\n\nconst initialState = {};\n\nfunction setRequiredSigners(state, action) {\n  const signatureImporters = {};\n  for (let signatureImporterNum=1; signatureImporterNum <= action.value; signatureImporterNum++) {\n    signatureImporters[signatureImporterNum] = {\n      ...initialSignatureImporterState,\n      ...{name: `Signature ${signatureImporterNum}`},\n    };\n  }\n  return {\n    ...state,\n    ...signatureImporters,\n  };\n}\n\nfunction updateSignatureImporterState(state, action, field) {\n  const signatureImporterChange = {};\n  signatureImporterChange[field] = action.value;\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], signatureImporterChange);\n  return newState;\n}\n\nfunction finalizeSignatureImporterState(state, action) {\n  const newState = {\n    ...state,\n  };\n  newState[action.number] = updateState(state[action.number], action.value);\n  return newState;\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case RESET_SIGNATURES:\n    return {...initialState};\n  case SET_REQUIRED_SIGNERS:\n    return setRequiredSigners(state, action);\n  case SET_SIGNATURE_IMPORTER_NAME:\n    return updateSignatureImporterState(state, action, \"name\");\n  case SET_SIGNATURE_IMPORTER_METHOD:\n    return updateSignatureImporterState(state, action, \"method\");\n  case SET_SIGNATURE_IMPORTER_BIP32_PATH:\n    return updateSignatureImporterState(state, action, \"bip32Path\");\n  case SET_SIGNATURE_IMPORTER_SIGNATURE:\n    return updateSignatureImporterState(state, action, \"signature\");\n  case SET_SIGNATURE_IMPORTER_PUBLIC_KEYS:\n    return updateSignatureImporterState(state, action, \"publicKeys\");\n  case SET_SIGNATURE_IMPORTER_FINALIZED:\n    return updateSignatureImporterState(state, action, \"finalized\");\n  case SET_SIGNATURE_IMPORTER_COMPLETE:\n    return finalizeSignatureImporterState(state, action);\n  \n  default:\n    return state;\n  }\n};\n","import BigNumber from 'bignumber.js';\nimport { updateState } from './utils';\nimport { \n  MAINNET,\n  P2SH,\n  estimateMultisigTransactionFee,\n  estimateMultisigTransactionFeeRate,\n  validateFeeRate,\n  validateFeeBTC,\n  validateOutputAmountBTC,\n  satoshisToBitcoins, \n  bitcoinsToSatoshis, \n  validateAddress,\n  unsignedMultisigTransaction,\n} from \"unchained-bitcoin\";\n\nimport {\n  SET_NETWORK,\n  SET_ADDRESS_TYPE,\n} from \"../actions/settingsActions\";\nimport {\n  CHOOSE_PERFORM_SPEND,\n\n  SET_REQUIRED_SIGNERS,\n  SET_TOTAL_SIGNERS,\n\n  SET_INPUTS,\n\n  ADD_OUTPUT,\n  SET_OUTPUT_ADDRESS,\n  SET_OUTPUT_AMOUNT,\n  DELETE_OUTPUT,\n\n  SET_FEE_RATE,\n  SET_FEE,\n\n  FINALIZE_OUTPUTS,\n  RESET_OUTPUTS,\n\n  SET_TXID,\n} from '../actions/transactionActions';\n\nfunction sortInputs(a, b) {\n  var x = a.txid.toLowerCase();\n  var y = b.txid.toLowerCase();\n  if (x < y) {return -1;}\n  if (x > y) {return 1;}\n  if (a.n < b.n) {return -1;}\n  if (a.n > b.n) {return 1;}    \n  return 0;\n};\n\nconst initialOutputState  = {\n  address: '',\n  amount: '',\n  amountSats: '',\n  addressError: '',\n  amountError: '',\n};\n\nconst initialOutputsState = [\n  {...initialOutputState}\n];\n\nconst initialState = {\n  chosen: false,\n  network: MAINNET,\n  inputs: [],\n  inputsTotalSats: new BigNumber(0),\n  outputs: [...initialOutputsState],\n  feeRate: '',\n  feeRateError: '',\n  fee: '',\n  feeError: '',\n  finalizedOutputs: false,\n  txid: '',\n  balanceError: '',\n  addressType: P2SH,\n  requiredSigners: 2,\n  totalSigners: 3,\n  unsignedTransaction: {},\n};\n\nfunction updateInputs(state, action) {\n  const inputsTotalSats = action.value\n        .map((input) => input.amountSats)\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  return updateState(\n    state,\n    {\n      inputs: action.value.sort(sortInputs),\n      inputsTotalSats,\n    });\n}\n\nfunction validateTransaction(state) {\n  if (\n    state.outputs.find((output) => (output.addressError !== '' || output.amountError  !== '')) \n      || state.feeError !== '' \n      || state.feeRateError !== ''\n  ) {\n    return {\n      ...state,\n      ...{balanceError: \"\"},\n    };\n  }\n  const feeSats = bitcoinsToSatoshis(new BigNumber(state.fee));\n  const outputTotalSats = state.outputs\n        .map((output) => bitcoinsToSatoshis(new BigNumber(output.amount || 0)))\n        .reduce(\n          (accumulator, currentValue) => accumulator.plus(currentValue),\n          new BigNumber(0));\n  if (! state.inputsTotalSats.isEqualTo(outputTotalSats.plus(feeSats))) {\n    const diff = outputTotalSats.plus(feeSats).minus(state.inputsTotalSats);\n    let balanceError;\n    if (diff.isNaN()) {\n      balanceError = \"Cannot calculate total.\";\n    } else{\n      const action = diff.isLessThan(0) ? 'Increase' : 'Decrease';\n      balanceError =`${action} by ${satoshisToBitcoins(diff.absoluteValue()).toFixed(8)}.`;\n    } \n    return {\n      ...state,\n      ...{balanceError},\n    };\n  } else {\n    return {\n      ...state,\n      ...{balanceError: ''},\n    };\n  }\n}\n\nfunction setFeeForRate(state, feeRateString, nout) {\n  return satoshisToBitcoins(estimateMultisigTransactionFee(\n    {\n      addressType: state.addressType,\n      numInputs: state.inputs.length,\n      numOutputs: nout,\n      m: state.requiredSigners,\n      n: state.totalSigners,\n      feesPerByteInSatoshis: feeRateString\n    })).toString()\n}\n\nfunction updateFeeRate(state, action) {\n  const feeRateString = action.value;\n  const feeRateError = validateFeeRate(feeRateString);\n  const fee = (\n    feeRateError === '' ? \n      setFeeForRate(state, feeRateString, state.outputs.length) :\n      '');\n    \n  return updateState(state, {\n    feeRate: feeRateString,\n    feeRateError,\n    fee,\n    feeError: '',\n  });\n}\n\nfunction updateFee(state, action) {\n  const feeString = action.value;\n  const feeError = validateFeeBTC(feeString, state.inputsTotalSats);\n  const feeRate = (\n    feeError === '' ? \n      estimateMultisigTransactionFeeRate(\n        {\n          addressType: state.addressType,\n          numInputs: state.inputs.length,\n          numOutputs: state.outputs.length,\n          m: state.requiredSigners,\n          n: state.totalSigners,\n          feesInSatoshis: bitcoinsToSatoshis(new BigNumber(feeString))\n        }).toString() \n      :\n      '');\n    \n  return updateState(state, {\n    fee: feeString,\n    feeError,\n    feeRate,\n    feeRateError: '',\n  });\n}\n\nfunction addOutput(state, action) {\n  const newOutputs = state.outputs.concat({...initialOutputState});\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction updateOutputAddress(state, action) {\n  const newOutputs = [...state.outputs];\n  const address = action.value;\n  let error = validateAddress(address, state.network);\n  if (error === '') {\n    for (var inputIndex=0; inputIndex < state.inputs.length; inputIndex++) {\n      const input = state.inputs[inputIndex];\n      if (address === input.address) {\n        error = \"Output address cannot equal input address.\";\n        break;\n      }\n    }\n  }\n  if (error === '') {\n    for (var outputIndex=0; outputIndex < state.outputs.length; outputIndex++) {\n      if (outputIndex !== (action.number - 1)) {\n        if (state.outputs[outputIndex].address === address) {\n          error = \"Duplicate output address.\";\n          break;\n        }\n      }\n    }\n  }\n  newOutputs[action.number - 1].address = address;\n  newOutputs[action.number - 1].addressError = error;\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction updateOutputAmount(state, action) {\n  const newOutputs = [...state.outputs];\n  const amount = action.value;\n  let error = validateOutputAmountBTC(amount, state.inputsTotalSats);\n  newOutputs[action.number - 1].amount = amount;\n  newOutputs[action.number - 1].amountError = error;\n  newOutputs[action.number - 1].amountSats = (error ? '' : bitcoinsToSatoshis(new BigNumber(action.value)));\n  return {\n    ...state,\n    ...{outputs: newOutputs},\n  };\n}\n\nfunction deleteOutput(state, action) {\n  const newOutputs = [];\n  for (var i = 0; i < state.outputs.length; i++) {\n    if (i !== (action.number - 1)) {\n      newOutputs.push(state.outputs[i]);\n    }\n  }\n  return {\n    ...state,\n    ...{outputs: newOutputs, fee: setFeeForRate(state, state.feeRate, newOutputs.length)},\n  };\n}\n\nfunction finalizeOutputs(state) {\n  const unsignedTransaction = unsignedMultisigTransaction(state.network, state.inputs, state.outputs);\n  return {\n    ...state,\n    ...{finalizedOutputs: true, unsignedTransaction},\n  };\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n  case CHOOSE_PERFORM_SPEND:\n    return updateState(state, { chosen: true} );\n  case SET_NETWORK:\n    return updateState(state, { network: action.value });\n  case SET_ADDRESS_TYPE:\n    return updateState(state, { addressType: action.value });\n  case SET_REQUIRED_SIGNERS:\n    return updateState(state, { requiredSigners: action.value });\n  case SET_TOTAL_SIGNERS:\n    return updateState(state, { totalSigners: action.value });\n  case SET_INPUTS:\n    return updateInputs(state, action);\n  case ADD_OUTPUT:\n    return validateTransaction(addOutput(state, action));\n  case SET_OUTPUT_ADDRESS:\n    return validateTransaction(updateOutputAddress(state, action));\n  case SET_OUTPUT_AMOUNT:\n    return validateTransaction(updateOutputAmount(state, action));\n  case DELETE_OUTPUT:\n    return validateTransaction(deleteOutput(state, action));\n  case SET_FEE_RATE:\n    return validateTransaction(updateFeeRate(state, action));\n  case SET_FEE:\n    return validateTransaction(updateFee(state, action));\n  case FINALIZE_OUTPUTS:\n    return finalizeOutputs(state);\n  case RESET_OUTPUTS:\n    return updateState(state, {\n      outputs: initialOutputsState, \n      fee: '',\n      balanceError: '',\n      // FIXME what about feeRate ?\n    }); \n  case SET_TXID:\n    return updateState(state, { txid: action.value });\n  default:\n    return state;\n  }\n};\n","export const UPDATE_DEPOSIT_NODE = \"UPDATE_DEPOSIT_NODE\";\nexport const UPDATE_CHANGE_NODE = \"UPDATE_CHANGE_NODE\";\n\nexport function updateDepositNodeAction(value) {\n  return {\n    type: UPDATE_DEPOSIT_NODE,\n    value: {\n      ...value,\n      ...{change: false}\n    },\n  };\n}\n\nexport function updateChangeNodeAction(value) {\n  return {\n    type: UPDATE_CHANGE_NODE,\n    value: {\n      ...value,\n      ...{change: true}\n    },\n  };\n}\n","import { combineReducers } from 'redux';\n\nimport settingsReducer from './settingsReducer';\nimport clientReducer from './clientReducer';\nimport braidReducer from './braidReducer';\nimport quorumReducer from './quorumReducer';\nimport addressReducer from './addressReducer';\n\nimport ownershipReducer from './ownershipReducer';\nimport signatureImportersReducer from './signatureImportersReducer';\nimport transactionReducer from './transactionReducer';\n\nimport {\n  UPDATE_DEPOSIT_NODE,\n  UPDATE_CHANGE_NODE,\n} from '../actions/walletActions';\n\nconst spendReducers = combineReducers({\n  ownership: ownershipReducer,\n  transaction: transactionReducer,\n  signatureImporters: signatureImportersReducer,\n});\n\nconst walletReducers = combineReducers({\n  deposits: braidReducer(UPDATE_DEPOSIT_NODE),\n  change: braidReducer(UPDATE_CHANGE_NODE),\n});\n\nconst rootReducers = combineReducers({\n  settings: settingsReducer,\n  client: clientReducer,\n  address: addressReducer,\n  spend: spendReducers,\n  quorum: quorumReducer,\n  wallet: walletReducers,\n});\n\nexport default rootReducers;\n","import 'babel-polyfill';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\nimport ReduxPromise from 'redux-promise';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport reducers from './reducers';\n\n/* eslint-disable-next-line no-underscore-dangle */\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducers,\n  composeEnhancers(\n    applyMiddleware(logger, ReduxPromise, thunk),\n  ),\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('app'),\n);\nregisterServiceWorker();\n"],"sourceRoot":""}